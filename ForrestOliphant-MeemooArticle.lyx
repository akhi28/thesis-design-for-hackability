#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrartcl
\begin_preamble
% article example for classicthesis.sty
 % KOMA-Script article 
\usepackage{lipsum}%\usepackage{../classicthesis-ldpkg}
\usepackage[nochapters]{classicthesis}% nochapters
\let\oldtitle\title
\renewcommand{\title}[1]{\oldtitle{\rmfamily\normalfont\spacedallcaps{#1}}}
\let\oldauthor\author
\renewcommand{\author}[1]{\oldauthor{\spacedlowsmallcaps{#1}}}
\date{}
\end_preamble
\options paper=a4,fontsize=10pt
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "urlcolor=webbrown,linkcolor=Blue,citecolor=webgreen"
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine natbib_authoryear
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Meemoo: Creative Hackable Web Apps
\end_layout

\begin_layout Author
Forrest Oliphant
\end_layout

\begin_layout Abstract
The main objective of this project is to design a modular dataflow visual
 programming framework using web technologies.
 The framework should empower non-coders to 
\begin_inset Quotes eld
\end_inset

hack
\begin_inset Quotes erd
\end_inset

 creative web apps by configuring wires that represent how modules communicate.
 There should be a simple syntax to define the inputs and outputs of a module.
 Apps created with the framework should have source code that is easy to
 read and share.
\end_layout

\begin_layout Abstract
To this end, I have designed and created a web-based framework called Meemoo.
\end_layout

\begin_layout Abstract
Within this framework, an 
\begin_inset Quotes eld
\end_inset

app
\begin_inset Quotes erd
\end_inset

 is a collection of modules and the wires that connect them.
 A module is a web page that can live anywhere online, and use any web technolog
y.
 This web page includes JavaScript that defines the module's inputs and
 outputs: what data is accepted and what kind of data will be sent.
 The wires define where each module sends data.
 The source code of the app that defines an its layout, routing, and state
 can be saved and shared with a small amount of text.
 
\end_layout

\begin_layout Abstract
Meemoo is programmed by connecting boxes with wires, putting programming
 within reach of non-coders.
\end_layout

\begin_layout Abstract
So far I have focused module development on realtime animation tools, as
 this makes it simple to explain and engage creatively with the concept.
 It is not limited to animation though; any app or system that can be described
 by a dataflow graph can be made into a Meemoo app.
 
\end_layout

\begin_layout Abstract
I didn't start making Meemoo as an educational tool, but I have since been
 influenced by software projects inspired by Constructionist learning theory:
 Logo, Smalltalk, and Scratch.
 As I have read texts on Constructionism, I have seen many parallels to
 my own experiences as a learner.
 I think that Meemoo has the potential to be a good tool for learning by
 making.
 
\end_layout

\begin_layout Abstract
The people that created the vision of the personal computer wanted everybody
 to be able to create their own tools.
 Learning traditional computer programming takes a major commitment, and
 most people are satisfied with the tools that come with the computer or
 are offered as services online.
 Meemoo is a toolmaker that makes it easier for people to create and modify
 their own tools.
 
\end_layout

\begin_layout Abstract
In this thesis I describe...
\end_layout

\begin_layout Abstract
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section*
Acknowledgements
\end_layout

\begin_layout Standard
LeGroup (Learning Environments research group) in Media Lab Helsinki.
\end_layout

\begin_layout Standard
Finland.
\end_layout

\begin_layout Standard
Mozilla WebFWD.
\end_layout

\begin_layout Standard
Aino and Ilo.
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
I will start with an abridged history of my relationship with digital media.
 Three anecdotes will illustrate the three most important aspects of this
 thesis project: creative, hackable, web.
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement o
overhang 15text%
width "50col%"
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/mac-connect-dots-2.png
	width 50text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Connecting-the-dots"

\end_inset


\begin_inset Quotes eld
\end_inset

Mousing Around
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

 My first memory of interacting with a computer was with an Apple Macintosh
 that my father brought home from work in the mid-1980s.
 I have a strong visual memory of using the mouse to connect numbered dots
 to draw a star (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Connecting-the-dots"

\end_inset

).
 Once the star was complete it briefly became animated.
 Seeing this graphic, however simple, react to my input and then come alive
 captured my imagination.
 We only had that computer for a few days, but I was hooked.
 This interaction was part of an introductory program to teach mouse skills,
 called 
\begin_inset Quotes eld
\end_inset

Mousing Around.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Because of timing or school priorities, I wasn't part of the small generation
 of students that was exposed to BASIC or LOGO programming in elementary
 school.
 I remained interested in computers, spending any time that I could get
 my hands on them on shareware games and paint programs.
 I didn't get into programming until high school, in two very different
 ways: Texas Instruments graphing calculators and web programming.
 
\end_layout

\begin_layout Standard
My higher-level math classes used TI-8x series of graphing calculators.
 These have the ability to write and run programs with a BASIC-like syntax.
 My first program mirrored a game played by many children on standard calculator
s: the 
\begin_inset Quotes eld
\end_inset

+1 game.
\begin_inset Quotes erd
\end_inset

 This game is played by pressing the buttons [1] [+] [1] [=], and then pressing
 [=] as fast as possible.
 This makes the calculator into a counter, and we would have races to see
 who could press [=] the most times in one minute.
 Pressing buttons seems to be a common interest for children.
 When a system reacts to the button press, it gives the child a sense of
 control.
 The program that I wrote was just a few lines of code.
 It counted from zero, adding one and displaying the result in an infinite
 loop as fast as the calculator could go.
 I had automated the +1 game, taking out the button-pressing dynamic.
 It was satisfying to see the numbers flying by on the screen.
 I then made a new version of the script that printed the Fibonacci sequence
 in the same manner.
\end_layout

\begin_layout Standard
I then figured out how to script complicated graphic drawings with these
 small machines.
 I would watch with interest as the calculator slowly rendered patterns
 from my scripts, one stroke at a time.
 This was my first experience with programming graphics.
 I never managed to make a program draw what I originally had in mind, but
 this wasn't discouraging.
 The serendipitous monochrome images that emerged from my experiments encouraged
 me to explore different directions, and create new challenges for myself.
 I learned a lot about cartesian geometry, algebra, and logic from these
 code explorations.
\end_layout

\begin_layout Standard
The availability of the Internet in my home spurred the second programming
 interest.
 It was empowering to publish my first web site.
 It was a place where I could freely express myself in many different ways.
 Anybody in the world could see it, through the same window and at the same
 size and resolution as the websites of corporations, governments, and universit
ies.
 Learning how to create and post webpages gave me a level of active participatio
n that other media had not offered me.
 
\end_layout

\begin_layout Standard
I learned web programming by example, mostly thanks to the 
\begin_inset Quotes eld
\end_inset

view source
\begin_inset Quotes erd
\end_inset

 command on the browser.
 I would take a little bit of code from a tutorial, some code from another
 page's source, and tinker and experiment with the combination in an editor
 that showed both the code and output in the same window.
 These web programming experiments continued from this time and have culminated
 in this thesis project.
\end_layout

\begin_layout Subsection
Hackers and Hackability
\end_layout

\begin_layout Standard

\emph on
The Jargon File
\emph default
, a reference and glossary started in 1973, gives eight definitions for
 
\begin_inset Quotes eld
\end_inset

hacker.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Quote
hacker: n.
 [originally, someone who makes furniture with an axe]
\end_layout

\begin_layout Enumerate
A person who enjoys exploring the details of programmable systems and how
 to stretch their capabilities, as opposed to most users, who prefer to
 learn only the minimum necessary.
 RFC1392, the Internet Users' Glossary, usefully amplifies this as: A person
 who delights in having an intimate understanding of the internal workings
 of a system, computers and computer networks in particular.
\end_layout

\begin_layout Enumerate
One who programs enthusiastically (even obsessively) or who enjoys programming
 rather than just theorizing about programming.
 
\end_layout

\begin_layout Enumerate
A person capable of appreciating hack value.
 
\end_layout

\begin_layout Enumerate
A person who is good at programming quickly.
 
\end_layout

\begin_layout Enumerate
An expert at a particular program, or one who frequently does work using
 it or on it; as in ‘a Unix hacker’.
 (Definitions 1 through 5 are correlated, and people who fit them congregate.)
 
\end_layout

\begin_layout Enumerate
An expert or enthusiast of any kind.
 One might be an astronomy hacker, for example.
 
\end_layout

\begin_layout Enumerate
One who enjoys the intellectual challenge of creatively overcoming or circumvent
ing limitations.
 
\end_layout

\begin_layout Enumerate
[deprecated] A malicious meddler who tries to discover sensitive information
 by poking around.
 Hence password hacker, network hacker.
 The correct term for this sense is cracker.
\end_layout

\begin_layout Quote
\begin_inset CommandInset citation
LatexCommand citep
key "Raymond2003"

\end_inset


\end_layout

\begin_layout Standard
The eighth definition, despite being deprecated in the Jargon File, has
 become the popular understanding of 
\begin_inset Quotes eld
\end_inset

hacker.
\begin_inset Quotes erd
\end_inset

 For the purpose of this thesis and project I will use and promote the first
 definition.
 
\begin_inset Marginal
status open

\begin_layout Plain Layout
Hackability: adj.
 the ability to understand and modify the workings of a system.
\end_layout

\end_inset

 In this context, 
\begin_inset Quotes eld
\end_inset

hackability
\begin_inset Quotes erd
\end_inset

 refers to design that encourages understanding of the workings of a system,
 in a addition to the ability to modify said system.
\end_layout

\begin_layout Standard
It might be a lost cause to try to reclaim this term from its common cultural
 understanding.
 The Maker Movement, which also places value in understanding and modifying
 systems and things, does not have such negative baggage with their moniker,
 as 
\begin_inset Quotes eld
\end_inset

make
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

maker
\begin_inset Quotes erd
\end_inset

 seem like more constructive terms.
 Although it isn't perfect, I will stick to the term 
\begin_inset Quotes eld
\end_inset

hackability,
\begin_inset Quotes erd
\end_inset

 as I think that it encompasses the spirit that I want to promote with regards
 to software.
\end_layout

\begin_layout Standard
There are other projects that are embracing this meaning as well, such as
 Hackity Hack!
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://hackety.com/"

\end_inset


\end_layout

\end_inset

 and Mozilla Hackasaurus
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://hackasaurus.org/"

\end_inset


\end_layout

\end_inset

, both aimed at getting children hacking.
\end_layout

\begin_layout Standard
Designing for hackability implies respect.
 The designer of a hackable thing acknowledges that they can't imagine every
 potential use, so they enable people to modify it to their will and connect
 it to other things.
 This quality can apply to software, physical artifacts, and services.
\end_layout

\begin_layout Standard
For software to be hackable the source code should be available under a
 Free license.
 While this enables other people with coding skills to modify a software
 project, I would like to expand the affordances of software hackability
 non-coders
\begin_inset Foot
status open

\begin_layout Plain Layout
In the course of this thesis I will refer to programming and coding as distinct
 skills.
 Learning to program is a process of learning to manipulate logical structures.
 Learning to code puts those structures into a linear-textual format that
 computers can parse.
 Different programmable systems emphasize and abstract these aspects differently.
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Metamedia
\end_layout

\begin_layout Standard
Alan Kay and Adele Goldberg coined the term 
\begin_inset Quotes eld
\end_inset

metamedium
\begin_inset Quotes erd
\end_inset

 to describe their vision of the computer as a medium that can be all other
 media.
 Unlike broadcast media which is passively consumed, computer media can
 also be participatory and active.
 This means that people can create and consume media on the same tool.
 
\begin_inset CommandInset citation
LatexCommand citeyearpar
key "Kay1977"

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Quotes eld
\end_inset

I suggest that Kay and others aimed to create a particular kind of new media—rat
her than merely simulating the appearances of old ones.
 These new media use already existing representational formats as their
 building blocks, while adding many new previously nonexistent properties.
 At the same time, as envisioned by Kay, these media are expandable—that
 is, users themselves should be able to easily add new properties, as well
 as to invent new media.
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
key "Manovich2008"

\end_inset


\end_layout

\begin_layout Standard
The term 
\begin_inset Quotes eld
\end_inset

Web 2.0
\begin_inset Quotes erd
\end_inset

 is used to describe the rise of online services that facilitate publishing
 content.
 This began with blogging services like LiveJournal in 1999, photo sharing
 sites like Flickr in 2004, and video sharing sites like Youtube in 2005.
 These services helped make the web more participatory, giving any person
 with internet access the ability to publish text, images, and video.
 Web 2.0 makes media distribution easier by abstracting away the need to
 learn about web servers and HTML.
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement o
overhang 15text%
width "40text%"
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/choose-your-own-youtube.png
	width 40text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The Gilady Land Interactive Story
\begin_inset CommandInset label
LatexCommand label
name "fig:The-Gilady-Land"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
While these services enable publishing of content, they are limited in how
 they can be used.
 The typical service presents a form with input fields for title, media
 file, description, and tags.
 This information then creates a single web page.
\end_layout

\begin_layout Standard
Some people have worked within these constraints to create interactive media
 using hyperlinks.
 For example, Youtube user TimsPuppetPals make a collection of videos called
 
\begin_inset Quotes eld
\end_inset

The Gilady Land Interactive Story.
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

The Gilady Land Interactive Story
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset href
LatexCommand href
target "http://youtu.be/spVMyoUcuR4"

\end_inset


\end_layout

\end_inset

 One video is the entry into the story, and the rest of the videos are unlisted
 within the Youtube sytem.
 In the end of each section of the story, viewers are presented with two
 choices as hyperlinks within the video (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Gilady-Land"

\end_inset

).
 
\end_layout

\begin_layout Standard
Interactive stories based on hyperlinking are limited to this kind of choose-you
r-own-adventure branching storyline.
 
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement o
overhang 15col%
width "40col%"
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/play-the-piano.png
	width 40text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Play the Piano
\begin_inset CommandInset label
LatexCommand label
name "fig:Play-the-Piano"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Another example of simple interactivity with hyperlinks is 
\begin_inset Quotes eld
\end_inset

Play the piano
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

Play the piano
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset href
LatexCommand href
target "http://youtu.be/oD-sSolVDiY"

\end_inset


\end_layout

\end_inset

 from Youtube user kokokaka3000.
 This interactive video uses hyperlinks overlaid on each key of piano keyboard.
 As you click on the links above each key, the video skips to a finger playing
 that key (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Play-the-Piano"

\end_inset

).
\end_layout

\begin_layout Standard
In order to create interactivity more complex than these two examples, some
 form of programming is needed, and it must be hosted outside of the service.
\end_layout

\begin_layout Standard
An example of a project with more complex interactivity is Darren Solomon's
 
\begin_inset Quotes eld
\end_inset

In B Flat.
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

In B Flat
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset href
LatexCommand href
target "http://www.inbflat.net/"

\end_inset


\end_layout

\end_inset

 To create this project, Solomon solicited videos of people making simple
 music in the same key.
 He then embedded twenty of these videos in a grid in one HTML page (Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:In-B-Flat"

\end_inset

).
 To interact with the piece, you press play on any or all of the videos
 in any order.
 Because of the floating nature of the music in all of the samples, they
 tend to sound good together no matter how they are mixed.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/in-b-flat.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
In B Flat
\begin_inset CommandInset label
LatexCommand label
name "fig:In-B-Flat"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The structure of 
\begin_inset Quotes eld
\end_inset

In B Flat
\begin_inset Quotes erd
\end_inset

—multiple videos that can be independently controlled in one HTML page—can
 be considered a new media afforded by the participatory nature of Youtube,
 and the ease of embedding videos.
 The ability to create this new media required HTML coding knowledge.
 
\end_layout

\begin_layout Standard
Youtube's embeddable player has a JavaScript Player API
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
YouTube JavaScript Player API https://developers.google.com/youtube/js_api_referen
ce
\end_layout

\end_inset

 which makes more complex interactivity possible.
 This increases Youtube's hackability, but again, only for people with coding
 skills.
\end_layout

\begin_layout Subsection
Tools
\end_layout

\begin_layout Quote
\begin_inset Quotes eld
\end_inset

The ability to 'read' a medium means that you can access materials and tools
 generated by others.
 The ability to 'write' a medium means you can generate materials and tools
 for others.
 You must have both to be literate.
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
key "Kay1990"

\end_inset


\end_layout

\begin_layout Standard
The content is usually created offline, with digital tools like Photoshop
 that mimic traditional analog tools.
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Section
Context
\end_layout

\begin_layout Standard
Meemoo has many influences and precedents in the way that it has been designed,
 some direct and others indirect.
\end_layout

\begin_layout Subsection
The personal computer
\end_layout

\begin_layout Standard
The Dynabook was a research project of Xerox Palo Alto Research Center that
 envisioned and designed the personal computer, more or less as we know
 it today.
 Alan Kay outlines some of the goals and philosophical influences of the
 project:
\end_layout

\begin_layout Quote
\begin_inset Quotes eld
\end_inset

Putting all this together, we want an apparently free environment in which
 exploration causes desired sequences to happen (Montessori); one that allows
 kinesthetic, iconic, and symbolic learning—"doing with images makes symbols"
 (Piaget & Bruner); the user is never trapped in a mode (GRAIL); the magic
 is embedded in the familiar (Negroponte); and which acts as a magnifying
 mirror for the user's own intelligence (Coleridge).
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
key "Kay1996"

\end_inset


\end_layout

\begin_layout Subsection
Programming for children
\end_layout

\begin_layout Standard
While Meemoo was not designed specifically for children, it shares with
 these projects the goal of lowering the barrier to entry to programming.
 
\end_layout

\begin_layout Subsubsection
Logo
\end_layout

\begin_layout Standard
Seymour Papert studied under Jean Piaget, an educational philosopher who
 outlined stages of mental development into a model of learning called 
\begin_inset Quotes eld
\end_inset

constructivism.
\begin_inset Quotes erd
\end_inset

 The basic idea is that people build knowledge structures through experiences.
 Papert added to this model, proposing that this happens best when 
\begin_inset Quotes eld
\end_inset

the learner is consciously engaged in constructing a public entity, whether
 it's a sand castle on the beach or a theory of the universe.
\begin_inset Quotes erd
\end_inset

 He called this idea 
\begin_inset Quotes eld
\end_inset

constructionism.
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
key "Papert1991"

\end_inset


\end_layout

\begin_layout Standard
Papert realized that the computer, as a metamedium, could be a powerful
 learning tool if students were able to create their own programs.
 Logo was designed as a simplified programming language for exploring mathematic
s.
 The first tests of Logo in the classroom predated the personal computer,
 sending code from a teletype terminal in the classroom to a remote mainframe
 computer 
\begin_inset CommandInset citation
LatexCommand citep
key "Papert1991"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement o
overhang 15text%
width "35text%"
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/logo-star.png
	width 35text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Logo-star"

\end_inset

 Logo turtle drawing a star
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
As computers became smaller and more common in classrooms, the signature
 Logo turtle was added to the system.
 This was a graphical representation of a turtle that would draw lines on
 the screen based on the instructions given by the child.
 For example, 
\begin_inset Quotes erd
\end_inset


\family typewriter
repeat 5 [ fd 100 rt 144 ]
\family default

\begin_inset Quotes erd
\end_inset

 tells the turtle 
\begin_inset Quotes eld
\end_inset

do this five times: walk forward 100 units, then turn 144 degrees to the
 right.
\begin_inset Quotes erd
\end_inset

 This small program draws a star (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Logo-star"

\end_inset

).
 By making the commands relative to the current position of the turtle,
 the language is easier to learn than a graphical drawing system based on
 cartesian coordinates 
\begin_inset CommandInset citation
LatexCommand citep
key "Papert1993"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Smalltalk
\end_layout

\begin_layout Standard
A fundamental requirement for the DynaBook research project was to create
 a system that could be programmed by the user.
 Kay invented Smalltalk and object-oriented programming for the Dynabook
 prototype system to lower the barrier to entry for coding.
 Object-oriented programming splits code into logical classes that define
 the data for the object and the methods that access or modify that data.
 In tests some children even programmed their own tools, like a twelve-year-old
 girl's painting system and a fifteen-year-old boy's circuit design system.
 Kay later referred to these impressive results as "early success syndrome."
 
\begin_inset Quotes eld
\end_inset

The successes were real, but they weren't as general as we thought.
\begin_inset Quotes erd
\end_inset

 Kay later decided that learning to program might be as difficult as learning
 to write, and take years to build up the mental models necessary to do
 it correctly.
 
\begin_inset CommandInset citation
LatexCommand citep
key "Kay1996"

\end_inset


\end_layout

\begin_layout Subsubsection
Scratch
\end_layout

\begin_layout Standard
Text-based programming languages have different requirements for syntax,
 punctuation, and indentation that if not followed perfectly will result
 in programs that don't run as expected (or at all).
 This can be frustrating for beginners and experienced coders alike—most
 of my programming errors are just missing semicolons.
 The creators of Scratch designed a system that takes the frustration of
 syntax errors out of coding.
\end_layout

\begin_layout Standard
Scratch uses drag-and-drop 
\begin_inset Quotes eld
\end_inset

code blocks
\begin_inset Quotes erd
\end_inset

 instead of a text-based syntax, which makes coding less error-prone for
 beginners.
 These code blocks snap together only in ways that make syntactic sense.
 
\begin_inset Quotes eld
\end_inset

Control structures (like 
\family typewriter
forever
\family default
 and 
\family typewriter
repeat
\family default
) are C-shaped to suggest that blocks should be placed inside them.
 Blocks that output values are shaped according to the types of values they
 return: ovals for numbers and hexagons for Booleans.
 Conditional blocks (like 
\family typewriter
if
\family default
 and 
\family typewriter
repeat-until
\family default
) have hexagon-shaped voids, indicating a Boolean is required.
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
key "Resnick2009"

\end_inset


\end_layout

\begin_layout Standard
Although creating a script with code blocks is more like snapping Legos
 together than writing code, it is still coding.
 The shape of the control structures is a direct metaphor to how code works,
 and more visually obvious than brackets or indentation.
 I imagine those logical structures are transferable to textual coding.
\end_layout

\begin_layout Standard
I feel a little cheated to not have had Scratch when I was a child.
 I would have loved it.
 I extended my graphing calculator scripting experiments from high school
 with an absurdist animation of a cat running into walls and reciting Fibonacci
 numbers 
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://scratch.mit.edu/projects/forresto/2398409"

\end_inset


\end_layout

\end_inset

 (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Fibonacci-Cat"

\end_inset

).
 I didn't have this final output planned from the start.
 The available blocks influenced the direction of my exploration.
 For example, the last change was adding the drum sound when I saw that
 it was as easy as adding one more block to the script.
 Making something with comparable collision detection, color cycling, and
 audio triggering in Flash or Processing would have taken much longer.
\end_layout

\begin_layout Standard
This was my first Scratch project, and from launching the environment for
 the first time it only took about thirty minutes to snap it together.
 Granted, I'm an experienced coder, but I try new languages and coding systems
 on occasion, and Scratch was by far the fastest and easiest to get up to
 speed.
 I look forward to playing with it more.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/fibonacci-cat-script.png
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Script
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/fibonacci-cat-program.png
	width 55text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Output
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Fibonacci Cat! Scratch program by the author 
\begin_inset CommandInset label
LatexCommand label
name "fig:Fibonacci-Cat"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
One nice software design feature of Scratch is that each element on the
 screen is a 
\begin_inset Quotes eld
\end_inset

sprite
\begin_inset Quotes erd
\end_inset

 with its own variables and scripts.
 This makes Scratch compositions object-oriented by default, as it would
 be hard to do it any other way.
\end_layout

\begin_layout Subsection
Visual programming languages
\end_layout

\begin_layout Standard
Meemoo is a kind of dataflow visual programming environment.
 This means that on a programming 
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement O
overhang 15text%
width "30text%"
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/rand-grail-visual-dataflow.jpg
	width 30text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
GRAIL
\end_layout

\end_inset


\end_layout

\end_inset

GRAIL (GRAphical Input Language) was an experimental dataflow environment
 developed by the Rand Corporation from 1967 to 1969.
 This interface was driven by a graphics tablet, so everything could be
 done without a keyboard.
 Nodes were added by drawing a box in place.
 Edges were drawn from node to node.
 Labels were added to the nodes with handwriting recognition.
 Edges were disconnected by scribbling over them.
 
\begin_inset CommandInset citation
LatexCommand citep
key "Ellis1969b"

\end_inset

 
\end_layout

\begin_layout Standard
Kay credited the project with directly inspiring some of the user interface
 elements in the DynaBook system, like windows that were resizable by dragging
 the corner.
 
\begin_inset Quotes eld
\end_inset

It was direct manipulation, it was analogical, it was modeless, it was beautiful.
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
key "Kay1996"

\end_inset


\end_layout

\begin_layout Standard
Visual programming is used most in the domain of real-time audio processing
 and synthesis (Pure Data and Max/MSP), visual effects (Quartz Composer
 and vvvv), and 3D material and shading design (Softimage Interactive Creative
 Environment) 
\begin_inset CommandInset citation
LatexCommand citep
key "Morrison2010"

\end_inset

.
 This is probably due to the fact that people involved in audio/visual productio
n tend to be comfortable with connecting equipment with cables, so it is
 much easier to learn a system based on this metaphor than to learn a system
 based on linear-textual coding.
\end_layout

\begin_layout Subsection
Free Software movement
\end_layout

\begin_layout Standard
Can't own ideas.
 Why do people give away their work?
\end_layout

\begin_layout Subsection
Open hardware and maker movement
\end_layout

\begin_layout Standard
Arduino modules: Gameduino, heart rate sensor, Lilypad...
 abstracting some of the electronics intricacies into modular components.
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

If you can't open it you don't own it.
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Subsection
JQuery Plugins
\end_layout

\begin_layout Standard
JQuery : plugin :: Meemoo : module
\end_layout

\begin_layout Standard
Large community sharing plugins.
 I made this thing and it is useful to me.
 
\end_layout

\begin_layout Section
Previous work and motivation
\end_layout

\begin_layout Standard
My motivation to make this project comes from years of experimenting with
 digital technologies.
 I have worked in different languages and environments, but the ability
 to share my work online has always brought me back to working with web
 technologies.
 I make my experiments into online creative tools (web apps) in order to
 see how other people use my creations.
\end_layout

\begin_layout Standard
I have experience with two dataflow visual programming environments: Quartz
 Composer and Pure Data.
 The feeling of direct manipulation and immediate feedback in working with
 these environments appealed to me.
 They were able to do graphics and audio processing beyond my coding ability
 at the time, so I was able to explore new kinds of audio/visual experiments.
 They are great tools for interactive installations, but it is impossible
 to use them for creating web apps.
\end_layout

\begin_layout Standard
In the past two years browser capabilities have increased and JavaScript
 engines have been made fast enough that audio/visual programming is now
 possible with web standards.
 I realized that I could make my own visual programming environment with
 features that appealed to me from different paradigms: modularity, reconfigurab
ility, instant feedback, and shareability.
 Creating a new creative tool is just a matter of wiring some modules together.
 I can write new modules in code that I'm already comfortable with.
 Things made with this toolmaker are easily shared online.
 
\end_layout

\begin_layout Standard
I hope that Meemoo might enable somebody to explore creative programming
 in the same way that my capabilities and imagination were extended with
 Quartz Composer.
 
\end_layout

\begin_layout Standard
In a way, Meemoo is an abstraction of all of my earlier digital creative
 experiments.
 I plan on rebuilding some of them in Meemoo to make it easier for me (and
 others) to modify how they work.
\end_layout

\begin_layout Subsection
Media Bitch (2002), Flash
\end_layout

\begin_layout Standard
http://forresto.com/oldsite/interactive/mbx/mediabitch.html
\end_layout

\begin_layout Subsection
Kaleidocam (2007), Quartz Composer
\end_layout

\begin_layout Standard
https://vimeo.com/387429
\end_layout

\begin_layout Standard
Learning QC and dataflow programming.
\end_layout

\begin_layout Subsection
Megacam (2010), Flash
\end_layout

\begin_layout Standard
http://sembiki.com/megacam
\end_layout

\begin_layout Standard
Webcam apps inspired in part by Lomo cameras.
 I chose presets for each toy to make it simpler, but that also removed
 the possibility to experiment with the variables.
\end_layout

\begin_layout Subsection
Looplab (2010), Pure Data
\end_layout

\begin_layout Standard
https://vimeo.com/16956269 http://www.flickr.com/photos/forresto/5125930908/
\end_layout

\begin_layout Standard
Learning Pure Data.
 Network communcation of identical apps, each passing data to the next.
\end_layout

\begin_layout Subsection
Opera stage projection mapping (2011), Quartz Composer
\end_layout

\begin_layout Standard
Last year I was working on a multi-screen video projection system for the
 set design of an Opera.
 I found Quartz Composer modules for midi control, video playback, and projectio
n mapping.
 I patched them together to create a system that controlled video on four
 projection-mapped screens from one projector.
 These modules were all shared online by their authors in the open-source
 spirit.
 I needed to add a feature to one of them, and was able to do so in XCode.
\end_layout

\begin_layout Standard
Meemoo will make it possible for people to not only share such modules online,
 but also wire them together, experiment, and save output instantly online.
 This will lower the barrier to entry and increase collaboration potential.
\end_layout

\begin_layout Subsection
Web Video Remixer (2011), HTML
\end_layout

\begin_layout Standard
This is the direct parent project of Meemoo, where I figured out how to
 communicate between web pages in iframes.
\end_layout

\begin_layout Section
Development
\end_layout

\begin_layout Standard
Development on Meemoo's ancestor project began in January 2011.
 In October 2011 Meemoo became a Mozilla WebFWD fellow project.
\end_layout

\begin_layout Standard
Meemoo is designed for hackability on all levels.
 On the highest level, people can add and remove modules and reconfigure
 wires without coding knowledge.
 On the lowest level, the entire project is Free software under the MIT
 and AGPL licenses, which guarantee the right to fork the project and change
 how it works at any level.
 
\end_layout

\begin_layout Subsection
Software design for hackability
\end_layout

\begin_layout Standard
One of the goals for the project is that it is hackable on all levels.
 On the lowest level, this means that the code is open source.
\end_layout

\begin_layout Subsubsection
Common communication library for modules
\end_layout

\begin_layout Standard
Each Meemoo module needs to include meemoo.js, which handles message routing.
 The inputs and outputs are then specified as in Algorithm 
\begin_inset CommandInset ref
LatexCommand vref
reference "Defining Inputs and Outputs"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Readable, sharable app source code
\end_layout

\begin_layout Standard
The source code format for a Meemoo app is JSON (JavaScript Object Notation)
 which is fairly easy to read.
 This 
\begin_inset Quotes eld
\end_inset

text blob
\begin_inset Quotes erd
\end_inset

 stores the position, connections, and state of all of the modules in the
 graph (Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Meemoo-App-Source"

\end_inset

).
 Because it is a small amount of text, it is easy to share the app source
 code in email, forums, image descriptions, comments, etc.
\end_layout

\begin_layout Subsection
User experience design for hackability
\end_layout

\begin_layout Subsubsection
Direct manipulation
\end_layout

\begin_layout Standard
Ben Shneiderman 
\begin_inset CommandInset citation
LatexCommand citep
key "Shneiderman1986"

\end_inset


\end_layout

\begin_layout Standard
Visual indication of what is happening in each module.
 (Like TouchDesigner).
 Dragging to change variables.
\end_layout

\begin_layout Subsubsection
Visual programming 
\begin_inset Quotes eld
\end_inset

patching
\begin_inset Quotes erd
\end_inset

 metaphor
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

The use of flexible cords with plugs at their ends and sockets (jacks) to
 make temporary connections dates back to manually operated telephone switchboar
ds.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsection
What is abstracted
\end_layout

\begin_layout Section
Tests/Results
\end_layout

\begin_layout Subsection
Persona
\end_layout

\begin_layout Standard
One design research methodology that I used to think about potential audience
 for Meemoo was 
\begin_inset Quotes eld
\end_inset

persona
\begin_inset Quotes erd
\end_inset

 profiles.
 I defined three 
\begin_inset Quotes eld
\end_inset

persona
\begin_inset Quotes erd
\end_inset

 profiles to describe typical people at different levels of engagement with
 Meemoo: the creator, the hacker, and the modder.
 It is designed in a way that each of these levels leads to the next, encouragin
g people 
\begin_inset Quotes eld
\end_inset

down the rabbit hole
\begin_inset Quotes erd
\end_inset

 towards learning coding.
\end_layout

\begin_layout Standard
Creators will use Meemoo apps to make audio-visual media and share them
 online.
 Hackers will explore how the apps work, and rewire them to work differently.
 Modders will use web technologies to modify modules and create new modules
 which will be used in different kinds of apps.
 
\end_layout

\begin_layout Subsubsection
Creator 
\end_layout

\begin_layout Subsubsection
Hacker 
\end_layout

\begin_layout Subsubsection
Modder
\end_layout

\begin_layout Subsection
User testing and feedback
\end_layout

\begin_layout Standard
In order to test the user experience of the framework, I did in-person talk-alou
d sessions.
 I had people interact with Meemoo, sometimes freely, and sometimes with
 prompts or goals to accomplish.
 As they interacted with the system, I asked them to speak aloud their thought
 process as much as possible.
\end_layout

\begin_layout Standard
Aino - Camdoodle
\end_layout

\begin_layout Standard
Ginger - 
\begin_inset Quotes eld
\end_inset

You should add an onionskin
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Teemu - Metronome animation
\end_layout

\begin_layout Standard
Jona - 
\begin_inset Quotes eld
\end_inset

Can I use this in my class?
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Facebook Beta group
\end_layout

\begin_layout Subsection
Economic model illustrated with Meemoo
\end_layout

\begin_layout Standard
http://meemoo.org/blog/2012-01-24-friction-free-post-scarcity-creative-economies/
\end_layout

\begin_layout Subsection
Live animation visuals for dance party
\end_layout

\begin_layout Standard
http://www.youtube.com/watch?v=T_tCyYGLWKM
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/meemoo-at-zodiak.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Meemoo at Zodiak
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
I was invited to do visuals for a Zodiak's Side-Step dance festival club
 night.
 I used the gig as an opportunity to push Meemoo development and pressure-test
 the live-animation features.
 
\end_layout

\begin_layout Standard
For the gig I made some special modules for creating a "world" into which
 I could insert animated sprites.
 On the software development side, I'm happy that I decided to make two
 modules (Controller and World) share the same Backbone model.
 Each module has its own view of the same model, so the data passed through
 the wire will be the same on both sides.
\end_layout

\begin_layout Standard
As the party started and I was still coding furiously, adding features to
 the world module.
 Thirty minutes later the music tempo picked up, inviting people to the
 dance floor, and I made myself declare the coding done for the night.
 It was a thrill to see the first sprite hit the dance floor: multicolored
 glitter swirling in water.
\end_layout

\begin_layout Standard
We used clay and construction paper (and some glitter) as the basic building
 blocks of the visuals.
 I'm attracted to the textures and imperfections that come from using materials
 like these.
 Using the taptempo module, I synced the sprites' animation to the rhythm.
 It was fun to build these tiny animations and then throw them onto the
 screens around the dance floor.
 
\end_layout

\begin_layout Standard
There are lots of improvements and ideas that came up in the evening:
\end_layout

\begin_layout Itemize
Camera: I used a Sony Eyetoy webcam, and the color was pretty bad.
 I chose kid's art supplies with rich colors, but most of the color was
 washed out in the first step.
 Next time I'll do some tests to find a better webcam, or use the camera
 on my phone, or a real digital camera somehow.
 
\end_layout

\begin_layout Itemize
Audience participation: I planned to use Kinect to get silhouettes of people
 dancing into the world, but ran out of time.
 I was imagining using different animated textures for specified depth ranges.
 
\end_layout

\begin_layout Itemize
Flocking: I only had time to implement the tiled animation.
 The original concept was that sprites could be individual or flocks that
 would move around the screens.
 
\end_layout

\begin_layout Itemize
UX tweaks: Confirm dialog on every delete got annoying when juggling around
 modules.
 Directly un/replugging wires is a suggestion that is now high on the to-do
 list.
 
\end_layout

\begin_layout Itemize
I made a hack to open the World module in a new window to view it fullscreen
 on the projectors.
 I plan on making this a built-in feature for any module.
\end_layout

\begin_layout Standard
Despite these limitations, I got a lot of good feedback about the visuals.
 People were interested in what I was doing, and came around to play with
 the art supplies.
 Doing dance party visuals powered by a web browser was a fun experiment,
 and with a few more display options I think that the limitations would
 have been less aesthetically obvious.
 Performing under pressure was a good way to test the system.
\end_layout

\begin_layout Standard
Only *once* in the evening did a JavaScript warning pop up on the dance
 floor.
 I consider that a victory, and it made me laugh a lot when it happened.
\end_layout

\begin_layout Section
Future Development
\end_layout

\begin_layout Standard
This idea is bigger than one developer and one master's thesis.
 I plan on finding resources to continue work, and to bring more people
 with varied talents into the project.
\end_layout

\begin_layout Subsection
Community for sharing apps
\end_layout

\begin_layout Standard
Meemoo was designed for sharing.
 I'd like to take elements of App Store, Reddit, and Github to create a
 community for sharing and forking Meemoo apps.
 Because of the small amount of source code to describe a Meemoo app (Algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Meemoo-App-Source"

\end_inset

) it will be relatively easy to make the community scalable.
\end_layout

\begin_layout Subsection
Touchscreen support
\end_layout

\begin_layout Standard
Some media observers, myself included, saw the rise of touchscreen devices
 like the iPhone and iPad as a step backwards for participatory media.
 As originally marketed, these devices seemed to be designed primarily for
 media consumption.
 When Apple later opened up the App Store they took a timid step towards
 hackability by allowing third party developers to create apps that extend
 the functionality of the device.
 I say 
\begin_inset Quotes eld
\end_inset

timid
\begin_inset Quotes erd
\end_inset

 because only developers that pay for the privilege can write apps for these
 devices, and only apps that pass an opaque curation process are allowed
 in the App Store.
\end_layout

\begin_layout Standard
Because of this closed ecosystem and technical limitations, the design of
 apps for iOS tend to have low to no hackability.
 In general, an app is designed to do one thing.
 The designer decides what the app does, how it communicates, where things
 can be shared.
 The user then uses the app.
 The designer/user roles tend to be well-defined in this way.
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement O
overhang 15text%
width "30text%"
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/appstore-icon.png
	width 30text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:App-Icon"

\end_inset

App Icon
\end_layout

\end_inset


\end_layout

\end_inset

 The standard icon for an app looks like a shiny glass object (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:App-Icon"

\end_inset

), which mirrors the aesthetics of the device itself.
 It symbolizes something highly designed and polished, not to be opened.
\end_layout

\begin_layout Standard
There are some notable exceptions: apps that encourage coding and exploration.
 These include Codea by Two Lives Left 
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://twolivesleft.com/Codea/"

\end_inset


\end_layout

\end_inset

 for Lua coding, Processing.js Mini-IDE by Brian Jepson 
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://www.jepstone.net/blog/2010/04/16/processing-js-mini-ide-for-ipad-iphone-android-chrome/"

\end_inset


\end_layout

\end_inset

, and GLSL Studio by kode80 
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://glslstudio.com/"

\end_inset


\end_layout

\end_inset

 for OpenGL shaders.
 These three apps are development environments that deal with the affordances
 and constraints of writing code on touchscreen devices in different ways.
 For example, Codea includes some well-designed features for touch-screen
 interaction with widgets embedded in the code, like popup number sliders
 and color pickers.
 However, without an external keyboard, any kind of extended writing on
 touchscreen devices is a difficult task.
 It is also against Apple's regulations to load external scripts in native
 apps, which makes it hard to share code.
\end_layout

\begin_layout Standard
Meemoo has the potential to become a powerful tool for creative programming
 on touchscreen devices.
 Gestures for zooming, panning, and dragging are common in touchscreen interacti
on, and should be tested to make them work with Meemoo.
 Zooming and panning already work smoothly, thanks to running in the browser.
 
\end_layout

\begin_layout Standard
There will be a library of modules that will reduce the need to write code.
 
\end_layout

\begin_layout Standard
Meemoo runs in browser, and JavaScript runs slower than native code.
 However, as the power of these devices increases, the kinds of apps that
 can be built with Meemoo will likewise increase.
\end_layout

\begin_layout Subsection
Code editing
\end_layout

\begin_layout Standard
Scratch has inspired some open-source libraries that use a codeblock programming
 metaphor.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/DesignBlocksJS.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
DesignBlocksJS
\begin_inset CommandInset label
LatexCommand label
name "fig:DesignBlocksJS"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Socket communication
\end_layout

\begin_layout Standard
UX and server for sending arbitrary data from Meemoo on my smartphone to
 my laptop to your tablet (and back).
\end_layout

\begin_layout Subsection
Meemoo hardware
\end_layout

\begin_layout Standard
Cheap computers (Raspberry Pi) + knobs + sliders + physical patch cables
 for performative interaction.
\end_layout

\begin_layout Subsection
Twenty Apps to Build With Meemoo
\end_layout

\begin_layout Standard
In the spirit of Seymour Papert and Cynthia Solomon's 1971 memo, 
\begin_inset Quotes eld
\end_inset

Twenty Things to Do With a Computer,
\begin_inset Quotes erd
\end_inset

 I present this list of potential Meemoo apps:
\end_layout

\begin_layout Enumerate
Instructional puzzle game based on rewiring modules
\end_layout

\begin_layout Enumerate
Kaleidoscope with reconfigurable mirrors
\end_layout

\begin_layout Enumerate
Experiment with video feedback with webcams pointed at screens
\end_layout

\begin_layout Enumerate
Text-to-song generator with computer generated voices singing in harmony
\end_layout

\begin_layout Enumerate
Artistic visualization of data from bio-sensors
\end_layout

\begin_layout Enumerate
Beatbox control of video mashup (sCrAmBlEd?HaCkZ!)
\end_layout

\begin_layout Enumerate
Hourglass module that flows virtual sand to other modules through the wires
\end_layout

\begin_layout Enumerate
TI-83 emulator 
\begin_inset Foot
status open

\begin_layout Plain Layout
Proof-of-concept by Cemetech & Kerm Martian: 
\begin_inset CommandInset href
LatexCommand href
target "http://www.cemetech.net/projects/jstified/jstified.php"

\end_inset


\end_layout

\end_inset

 to draw animations
\end_layout

\begin_layout Enumerate
LOGO emulator 
\begin_inset Foot
status open

\begin_layout Plain Layout
Proof-of-concept by Joshua Bell: 
\begin_inset CommandInset href
LatexCommand href
target "http://www.calormen.com/Logo/"

\end_inset


\end_layout

\end_inset

 to draw animations
\end_layout

\begin_layout Enumerate
A Scratch game that draws different scenery based on location, time, and
 weather data.
 
\end_layout

\begin_layout Enumerate
...
\end_layout

\begin_layout Standard
These examples show how—in the same way that the Internet encompasses all
 past and future media—a hackable creative coding environment that runs
 in the browser can encompass and interact with all other creative coding
 environments.
 The educational philosophies that developed these systems can be hacked,
 updated, and incorporated into new educational goals.
\end_layout

\begin_layout Section
Conclusions
\end_layout

\begin_layout Standard
I contacted Ze Frank to ask if he would be a project advisor.
 He gave me some good things to think about:
\end_layout

\begin_layout Quote
\begin_inset Quotes eld
\end_inset

Creating 'possibility spaces' can be exciting for a number of reasons...
 but also can be a false God.
 It can be an excuse to never to actually grapple with whether there is
 value in the output itself, whether beauty is enough, whether people actually
 want what you are making, etc...
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Making a creative tool maker is pointless if, in the end, nothing creative
 is made.
 My dream is that somebody will make something beautiful with it.
 Shouldn't that somebody be me? If I don't do it, why would anybody else?
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "library"
options "bibtotoc,plainnat"

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Addsec
\start_of_appendix
Appendix
\end_layout

\begin_layout Standard

\size small
\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout LyX-Code

\family roman
\size small
\begin_inset Caption

\begin_layout Plain Layout
Defining Inputs and Outputs (JavaScript)
\begin_inset CommandInset label
LatexCommand label
name "Defining Inputs and Outputs"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
\noindent
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "children/define-inputs-outputs-example.js"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent

\size small
\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout Plain Layout

\size small
\begin_inset Caption

\begin_layout Plain Layout
Meemoo App Source Code (JSON)
\begin_inset CommandInset label
LatexCommand label
name "alg:Meemoo-App-Source"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent

\family typewriter
\size small
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "children/meemoo-graph-source.js"

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
