#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrartcl
\begin_preamble
% article example for classicthesis.sty
 % KOMA-Script article 
\usepackage{lipsum}%\usepackage{../classicthesis-ldpkg}
\usepackage[nochapters]{classicthesis}% nochapters
\let\oldtitle\title
\renewcommand{\title}[1]{\oldtitle{\rmfamily\normalfont\spacedallcaps{#1}}}
\let\oldauthor\author
\renewcommand{\author}[1]{\oldauthor{\spacedlowsmallcaps{#1}}}
\date{}
\end_preamble
\options paper=a4,fontsize=10pt
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "urlcolor=webbrown,linkcolor=Blue,citecolor=webgreen"
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Meemoo: Hackable Creative Web Apps
\end_layout

\begin_layout Author
Forrest Oliphant
\end_layout

\begin_layout Abstract
Meemoo is a framework for creating hackable web apps.
 An app is a graph of modules and the wires that connect them.
 A module is a web page that can live anywhere online, and use any web technolog
y.
 This web page includes JavaScript that defines the module's inputs and
 outputs: what data is accepted and what kind of data will be sent.
 The wires define where each module sends data.
 The graph that defines an app's layout, routing, and state can be saved
 and shared with a small amount of text.
\end_layout

\begin_layout Abstract
I have focused module development on realtime animation tools, as this makes
 it simple to explain and engage creatively with the concept.
 It is not limited to animation though; any app or system that can be described
 by a dataflow graph can be made into a Meemoo app.
\end_layout

\begin_layout Abstract
It has been designed with a few groups of people in mind: creators, hackers,
 and modders.
 Creators will use Meemoo apps to make audio-visual media and share them
 online.
 Hackers will explore how the apps work, and rewire them to work differently.
 Modders will use web technologies to create new modules which will allow
 different kinds of apps.
 It is designed in a way that each of these levels leads to the next, encouragin
g people 
\begin_inset Quotes eld
\end_inset

down the rabbit hole
\begin_inset Quotes erd
\end_inset

 towards learning coding.
\end_layout

\begin_layout Abstract
In this thesis I describe...
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Intro
\end_layout

\begin_layout Standard
Learning by example.
 How I learned HTML.
 Social constructionism?
\end_layout

\begin_layout Subsection
Hackability
\end_layout

\begin_layout Standard
Designing for hackability implies respect.
 The designer acknowledges that they can't imagine every use of their thing,
 so they enable people to hack, bend, mod, or fork it to their will.
\end_layout

\begin_layout Standard
Meemoo is designed for hackability on all levels.
 On the highest level, people can add and remove modules and wires without
 coding knowledge.
 On the lowest level, the entire project is Free software.
 https://github.com/meemoo
\end_layout

\begin_layout Subsection
Metamedia
\end_layout

\begin_layout Standard
Kay: computer can be all other media, and is also active.
 Internet makes all media available everywhere.
 Web 2.0 made it participatory for publishing text, photos, videos.
 Twitter, Flickr, Youtube: one solution per media, no coding needed.
 
\end_layout

\begin_layout Standard
Web 2.0 makes media distribution easier by abstracting away FTP, HTML, etc.
\end_layout

\begin_layout Standard
Maybe Web 2.5 is creative apps online, like Picnik photo editor and TinkerCAD
 3D design software.
 Media creation without desktop software.
\end_layout

\begin_layout Standard
Meemoo makes the modes of production also participatory.
 This makes it possible for people to invent and share new media.
 Web 3.0: web software creation without desktop software (or code)?
\end_layout

\begin_layout Standard
If, as McLuhan proposed, 
\begin_inset Quotes eld
\end_inset

the medium is the message,
\begin_inset Quotes erd
\end_inset

 then what kinds of messages are implied by the metamedium? 
\end_layout

\begin_layout Standard
D.
 Rushkoff argues (Program or Be Programmed) that learning to code opens
 people's eyes to the design of all systems.
 They see that bad design can be fixed.
\end_layout

\begin_layout Subsection
Tools
\end_layout

\begin_layout Standard
From making tools to making toolmakers.
 Tool designer thinks: 
\begin_inset Quotes eld
\end_inset

How will people use this tool?
\begin_inset Quotes erd
\end_inset

 Toolmaker designer thinks: how will tool designers use this tool (to think
 about how people will use their tool)? Thinking about thinking about thinking
 (about thinking?).
 Metaconstructionism? 
\end_layout

\begin_layout Standard
Meemoo will enable people to become tool designers before learning coding
 skills.
\end_layout

\begin_layout Standard
Programming skills distinct from coding skills.
 Visual programming makes the dataflow logic visual.
 With text-based coding you need to keep track of these relationships in
 another way.
\end_layout

\begin_layout Section
Context
\end_layout

\begin_layout Subsection
Computers as abstraction
\end_layout

\begin_layout Subsubsection
Mainframe to PC: Dynabook
\end_layout

\begin_layout Standard
Kay: Promethian effort to bring computation from 
\begin_inset Quotes eld
\end_inset

priesthood
\begin_inset Quotes erd
\end_inset

 of mainframe admins to all people, especially children.
\end_layout

\begin_layout Subsubsection
Programming for kids: Smalltalk, Logo, Scratch, Alice
\end_layout

\begin_layout Standard
Constructionism: getting kids programming gets them to think about thinking.
 The metamedium gives them control.
\end_layout

\begin_layout Subsection
Visual programming languages
\end_layout

\begin_layout Standard
Meemoo is a kind of dataflow visual programming environment.
 This means that on a programming 
\end_layout

\begin_layout Subsection
Free Software movement
\end_layout

\begin_layout Standard
Can't own ideas.
 Why do people give away their work?
\end_layout

\begin_layout Subsection
Open hardware and maker movement
\end_layout

\begin_layout Standard
Arduino modules: Gameduino, heart rate sensor, Lilypad...
 abstracting some of the electronics intricacies into modular components.
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

If you can't open it you don't own it.
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Subsection
JQuery Plugins
\end_layout

\begin_layout Standard
JQuery : plugin :: Meemoo : module
\end_layout

\begin_layout Standard
Large community sharing plugins.
 I made this thing and it is useful to me.
 
\end_layout

\begin_layout Section
Development
\end_layout

\begin_layout Standard
Development on Meemoo's ancestor project began in January 2011.
 In October 2011 Meemoo became a Mozilla WebFWD fellow project.
\end_layout

\begin_layout Subsection
Previous work
\end_layout

\begin_layout Standard
Meemoo is an abstraction of all of my earlier creative web app experiments,
 and I plan on rebuilding them in Meemoo to make it easier for me (and others)
 to modify how they work.
 I call it my 
\shape italic
opus sink
\shape default
.
\end_layout

\begin_layout Subsubsection
Media Bitch (2002), Flash
\end_layout

\begin_layout Standard
http://forresto.com/oldsite/interactive/mbx/mediabitch.html
\end_layout

\begin_layout Subsubsection
Kaleidocam (2007), Quartz Composer
\end_layout

\begin_layout Standard
https://vimeo.com/387429
\end_layout

\begin_layout Standard
Learning QC and dataflow programming.
\end_layout

\begin_layout Subsubsection
Megacam (2010), Flash
\end_layout

\begin_layout Standard
http://sembiki.com/megacam
\end_layout

\begin_layout Standard
Webcam apps inspired in part by Lomo cameras.
 I chose presets for each toy to make it simpler, but that also removed
 the possibility to experiment with the variables.
\end_layout

\begin_layout Subsubsection
Looplab (2010), Pure Data
\end_layout

\begin_layout Standard
https://vimeo.com/16956269 http://www.flickr.com/photos/forresto/5125930908/
\end_layout

\begin_layout Standard
Learning Pure Data.
 Network communcation of identical apps, each passing data to the next.
\end_layout

\begin_layout Subsubsection
Opera stage projection mapping (2011), Quartz Composer
\end_layout

\begin_layout Standard
Last year I was working on a multi-screen video projection system for the
 set design of an Opera.
 I found Quartz Composer modules for midi control, video playback, and projectio
n mapping.
 I patched them together to create a system that controlled video on four
 projection-mapped screens from one projector.
 These modules were all shared online by their authors in the open-source
 spirit.
 I needed to add a feature to one of them, and was able to do so in XCode.
\end_layout

\begin_layout Standard
Meemoo will make it possible for people to not only share such modules online,
 but also wire them together, experiement, and save output instantly online.
 This will lower the barrier to entry and increase collaboration potential.
\end_layout

\begin_layout Subsubsection
Web Video Remixer (2011), HTML
\end_layout

\begin_layout Standard
This is the direct parent project of Meemoo, where I figured out how to
 communicate between web pages in iframes.
\end_layout

\begin_layout Subsection
Software design for hackability
\end_layout

\begin_layout Standard
One of the goals for the project is that it is hackable on all levels.
 On the lowest level, this means that the code is open source.
\end_layout

\begin_layout Subsubsection
Common communication library for modules
\end_layout

\begin_layout Standard
Each Meemoo module needs to include meemoo.js, which handles message routing.
 The inputs and outputs are then specified as in Algorithm 
\begin_inset CommandInset ref
LatexCommand vref
reference "Defining Inputs and Outputs"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout LyX-Code
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "Defining Inputs and Outputs"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "children/define-inputs-outputs-example.js"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Sharable app 
\begin_inset Quotes eld
\end_inset

source code
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
The graph format is JSON, like graph={nodes:[],edges:[]}.
 This 
\begin_inset Quotes eld
\end_inset

text blob
\begin_inset Quotes erd
\end_inset

 stores the position, connections, and state of all of the modules in the
 graph, which can be considered the source code of the app.
 Because it is a small amount of text, it is easy to share the app source
 code in forums, image descriptions, comments...
\end_layout

\begin_layout Subsection
User experience design for hackability
\end_layout

\begin_layout Subsubsection
Direct manipulation
\end_layout

\begin_layout Standard
Ben Shneiderman
\end_layout

\begin_layout Standard
Visual indication of what is happening in each module.
 (Like TouchDesigner).
 Dragging to change variables.
\end_layout

\begin_layout Subsubsection
Visual programming 
\begin_inset Quotes eld
\end_inset

patching
\begin_inset Quotes erd
\end_inset

 metaphor
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

The use of flexible cords with plugs at their ends and sockets (jacks) to
 make temporary connections dates back to cord-type manually operated telephone
 switchboards (if not even earlier, possibly for telegraph circuits).
 Cords with plugs at both ends had been used for many decades before the
 advent of Dr.
 Moog's synthesizers to make temporary connections ("patches") in such places
 as radio and recording studios.
 These came to be known as "patch cords", and that term was also used for
 Moog modular systems.
 As familiarity developed, a given setup of the synthesizer (both cord connectio
ns and knob settings) came to be referred to as a "patch", and the term
 has persisted, applying to systems that do not use patch cords.
\begin_inset Quotes erd
\end_inset

 - 
\begin_inset CommandInset href
LatexCommand href
name "Wikipedia on Moog"
target "http://en.wikipedia.org/wiki/Moog_synthesizer#Early_history"

\end_inset


\end_layout

\begin_layout Subsection
What is abstracted
\end_layout

\begin_layout Standard
As a programmer, working in Puredata and Quartz Composer can be frustrating.
 Certain logical constructions that would be easy to describe in code become
 a jumbled mess of boxes and wires.
\end_layout

\begin_layout Section
Tests/Results
\end_layout

\begin_layout Subsection
User testing and feedback
\end_layout

\begin_layout Standard
Aino - Camdoodle
\end_layout

\begin_layout Standard
Ginger - 
\begin_inset Quotes eld
\end_inset

You should add an onionskin
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Teemu - Metronome animation
\end_layout

\begin_layout Standard
Facebook Beta group
\end_layout

\begin_layout Subsection
Economic model illustrated with Meemoo
\end_layout

\begin_layout Standard
http://meemoo.org/blog/2012-01-24-friction-free-post-scarcity-creative-economies/
\end_layout

\begin_layout Subsection
Live animation visuals for dance party
\end_layout

\begin_layout Standard
http://www.youtube.com/watch?v=x1L-2jRVyhk
\end_layout

\begin_layout Section
Future Development
\end_layout

\begin_layout Standard
This idea is bigger than one developer and one master's thesis.
 I plan on finding resources to continue work, and to bring more people
 with varied talents into the project.
\end_layout

\begin_layout Subsection
Community for sharing apps
\end_layout

\begin_layout Standard
Meemoo was designed for sharing.
 
\end_layout

\begin_layout Subsection
Socket communication
\end_layout

\begin_layout Standard
UX and server for sending arbitrary data from Meemoo on my smartphone to
 my laptop to your tablet (and back).
\end_layout

\begin_layout Subsection
Meemoo hardware
\end_layout

\begin_layout Standard
Cheap computers (Raspberry Pi) + knobs + sliders + physical patch cables
 for performative interaction.
\end_layout

\begin_layout Subsection
Twenty Apps to Build With Meemoo
\end_layout

\begin_layout Standard
In the spirit of Seymour Papert and Cynthia Solomon's 1971 memo, Twenty
 Things to Do With a Computer, I present this list of potential Meemoo apps:
\end_layout

\begin_layout Enumerate
Kaleidoscope with reconfigurable mirrors
\end_layout

\begin_layout Enumerate
Experiment with video feedback with webcams pointed at screens
\end_layout

\begin_layout Enumerate
Text-to-song generator with computer generated voices singing in harmony
\end_layout

\begin_layout Enumerate
Artistic visualization of data from bio-sensors
\end_layout

\begin_layout Enumerate
Beatbox control of video mashup (sCrAmBlEd?HaCkZ!)
\end_layout

\begin_layout Enumerate
...
\end_layout

\begin_layout Section
Conclusions
\end_layout

\begin_layout Standard
I contacted Ze Frank to ask if he would be a project advisor.
 He gave me some good things to think about:
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

Creating 'possibility spaces' can be exciting for a number of reasons...
 but also can be a false God.
 It can be an excuse to never to actually grapple with whether there is
 value in the output itself, whether beauty is enough, whether people actually
 want what you are making, etc...
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Making a creative tool maker is pointless if, in the end, nothing creative
 is made.
 My dream is that somebody will make something beautiful with it.
 Shouldn't that somebody be me? If I don't do it, why would anybody else?
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% bib stuff
\end_layout

\begin_layout Plain Layout


\backslash
addtocontents{toc}{
\backslash
protect
\backslash
vspace{
\backslash
beforebibskip}}
\end_layout

\end_inset

 
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintAll"
bibfiles "../Bibliography"
options "bibtotoc,plain"

\end_inset

 
\end_layout

\end_body
\end_document
