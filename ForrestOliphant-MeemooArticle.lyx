#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrartcl
\begin_preamble
% article example for classicthesis.sty
 % KOMA-Script article 
\usepackage{lipsum}%\usepackage{../classicthesis-ldpkg}
\usepackage[nochapters]{classicthesis}% nochapters
\let\oldtitle\title
\renewcommand{\title}[1]{\oldtitle{\rmfamily\normalfont\spacedallcaps{#1}}}
\let\oldauthor\author
\renewcommand{\author}[1]{\oldauthor{\spacedlowsmallcaps{#1}}}
\date{}
\end_preamble
\options paper=a4,fontsize=10pt
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "urlcolor=webbrown,linkcolor=Blue,citecolor=webgreen"
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine natbib_authoryear
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Meemoo: Hackable Creative Web Apps
\end_layout

\begin_layout Author
Forrest Oliphant
\end_layout

\begin_layout Abstract
The main objective of this project is to design a modular flow-based visual
 programming environment using web technologies.
 The environment should empower non-coders to 
\begin_inset Quotes eld
\end_inset

hack
\begin_inset Quotes erd
\end_inset

 creative web apps by configuring wires that represent how modules communicate.
 Apps created with the environment should have source code that is easy
 to read and share.
\end_layout

\begin_layout Abstract
I have named the framework Meemoo.
 Within this framework, an app is a graph of modules and the wires that
 connect them.
 A module is a web page that can live anywhere online, and use any web technolog
y.
 This web page includes JavaScript that defines the module's inputs and
 outputs: what data is accepted and what kind of data will be sent.
 The wires define where each module sends data.
 The source code of the graph that defines an app's layout, routing, and
 state can be saved and shared with a small amount of text.
 
\end_layout

\begin_layout Abstract
So far I have focused module development on realtime animation tools, as
 this makes it simple to explain and engage creatively with the concept.
 It is not limited to animation though; any app or system that can be described
 by a data-flow graph can be made into a Meemoo app.
 
\end_layout

\begin_layout Abstract
Meemoo has been designed with a few groups of people in mind: creators,
 hackers, and modders.
 Creators will use Meemoo apps to make audio-visual media and share them
 online.
 Hackers will explore how the apps work, and rewire them to work differently.
 Modders will use web technologies to modify modules and create new modules
 which will be used in different kinds of apps.
 It is designed in a way that each of these levels leads to the next, encouragin
g people 
\begin_inset Quotes eld
\end_inset

down the rabbit hole
\begin_inset Quotes erd
\end_inset

 towards learning coding.
\end_layout

\begin_layout Abstract
In this thesis I describe...
 
\end_layout

\begin_layout Abstract
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
My first memory of interacting with a personal computer was with an Apple
 Macintosh that my father brought home from work in the mid-1980s.
 I have a strong visual memory of using the mouse to connect numbered dots
 to draw a star (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Connecting-the-dots"

\end_inset

).
 This interaction was part of an introductory program to teach mouse skills,
 called 
\begin_inset Quotes eld
\end_inset

Mousing Around.
\begin_inset Quotes erd
\end_inset

 Seeing this graphic, however simple, react to my input captured my imagination.
 We only had that computer for a few days, but I was hooked.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/mac-connect-dots-2.png
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Connecting-the-dots"

\end_inset


\begin_inset Quotes eld
\end_inset

Mousing Around
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
key "Wichary2012"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Because of timing or school priorities, I wasn't part of the small generation
 of students that was exposed to BASIC or LOGO programming in elementary
 school.
 I remained interested in computers, spending any time that I could get
 my hands on them on shareware games and paint programs.
 I didn't get into programming until high school, in two very different
 ways: the Texas Instruments graphing calculators and web programming.
 
\end_layout

\begin_layout Standard
My higher-level math classes used TI-83 graphing calculators.
 These have the ability to write and run programs with a BASIC-like syntax.
 My first program mirrored a game played by many children on standard calculator
s: the 
\begin_inset Quotes eld
\end_inset

+1 game.
\begin_inset Quotes erd
\end_inset

 This game is played by pressing the buttons [1] [+] [1] [=], and then pressing
 [=] as fast as possible.
 This makes the calculator into a counter, and we would have races to see
 who could press [=] the most times in one minute.
 Pressing buttons seems to be a common interest for children.
 When a system reacts to the button press, it gives the child a sense of
 control.
 The program that I wrote was just a few lines of code.
 It counted from zero, adding one and displaying the result in an infinite
 loop as fast as the calculator could go.
 I had automated the +1 game, taking out the button-pressing dynamic.
 It was satisfying to see the numbers flying by on the screen.
\end_layout

\begin_layout Standard
I then figured out how to script complicated graphic drawings with these
 small machines.
 It was satisfying to see the calculator slowly render geometric patterns
 from my scripts.
 This was my first experience with programming graphics.
 I never managed to make the program draw what I originally had in mind,
 but this wasn't discouraging.
 The serendipitous monochrome images that emerged from my experiments encouraged
 me to explore different directions, and create new challenges for myself.
 I believe that I learned a lot about geometry, algebra, and logic from
 these code explorations, but not in a way that was applicable to math tests.
\end_layout

\begin_layout Standard
The availability of the Internet in my home spurred the second programming
 interest.
 It was empowering to publish my first web site.
 It was a place where I could freely express myself in many different ways.
 Anybody in the world could see it, through the same window and at the same
 size and resolution as the websites of corporations, governments, and universit
ies.
 Learning how to create and post webpages gave me a level of participation
 that other media had not offered me.
\end_layout

\begin_layout Standard
I learned web programming by example, mostly thanks to the 
\begin_inset Quotes eld
\end_inset

view source
\begin_inset Quotes erd
\end_inset

 command on the browser.
 I would take a little bit of code from a tutorial, some code from another
 page's source, and tinker and experiment with the combination in an editor
 that showed both the code and output in the same window.
 These web programming experiments continued from this time and have culminated
 in this thesis project.
\end_layout

\begin_layout Subsection
Hackers and Hackability
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

The Jargon File,
\begin_inset Quotes erd
\end_inset

 a reference and glossary started in 1973, gives eight definitions for 
\begin_inset Quotes eld
\end_inset

hacker.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Quote
hacker: n.
 [originally, someone who makes furniture with an axe]
\end_layout

\begin_layout Enumerate
A person who enjoys exploring the details of programmable systems and how
 to stretch their capabilities, as opposed to most users, who prefer to
 learn only the minimum necessary.
 RFC1392, the Internet Users' Glossary, usefully amplifies this as: A person
 who delights in having an intimate understanding of the internal workings
 of a system, computers and computer networks in particular.
\end_layout

\begin_layout Enumerate
One who programs enthusiastically (even obsessively) or who enjoys programming
 rather than just theorizing about programming.
 
\end_layout

\begin_layout Enumerate
A person capable of appreciating hack value.
 
\end_layout

\begin_layout Enumerate
A person who is good at programming quickly.
 
\end_layout

\begin_layout Enumerate
An expert at a particular program, or one who frequently does work using
 it or on it; as in ‘a Unix hacker’.
 (Definitions 1 through 5 are correlated, and people who fit them congregate.)
 
\end_layout

\begin_layout Enumerate
An expert or enthusiast of any kind.
 One might be an astronomy hacker, for example.
 
\end_layout

\begin_layout Enumerate
One who enjoys the intellectual challenge of creatively overcoming or circumvent
ing limitations.
 
\end_layout

\begin_layout Enumerate
[deprecated] A malicious meddler who tries to discover sensitive information
 by poking around.
 Hence password hacker, network hacker.
 The correct term for this sense is cracker.
\end_layout

\begin_layout Quote
\begin_inset CommandInset citation
LatexCommand citep
key "Raymond2003"

\end_inset


\end_layout

\begin_layout Standard
The eighth definition, despite being deprecated in the Jargon File, has
 become the popular understanding of 
\begin_inset Quotes eld
\end_inset

hacker.
\begin_inset Quotes erd
\end_inset

 For the purpose of this thesis and project I will use and promote the first
 definition.
 
\begin_inset Marginal
status open

\begin_layout Plain Layout
Hackability: adj.
 the ability to understand and modify the workings of a system.
\end_layout

\end_inset

 In this context, 
\begin_inset Quotes eld
\end_inset

hackability
\begin_inset Quotes erd
\end_inset

 refers to design that encourages understanding of the workings of a system,
 in a addition to the ability to modify said system.
\end_layout

\begin_layout Standard
It might be a lost cause to try to reclaim this term from its common cultural
 understanding.
 The Maker Movement, which also places value in understanding and modifying
 systems and things, does not have such negative baggage with their moniker,
 as 
\begin_inset Quotes eld
\end_inset

make
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

maker
\begin_inset Quotes erd
\end_inset

 seem like more constructive terms.
 Although it isn't perfect, I will stick to the term 
\begin_inset Quotes eld
\end_inset

hackability,
\begin_inset Quotes erd
\end_inset

 as I think that it encompasses the spirit that I want to promote with regards
 to software.
\end_layout

\begin_layout Standard
Designing for hackability implies respect.
 The designer of a hackable thing acknowledges that they can't imagine every
 potential use, so they enable people to hack, bend, mod, or fork it to
 their will, and connect it to other things.
 This quality can apply to software, electronics, and other 
\end_layout

\begin_layout Subsection
Metamedia
\end_layout

\begin_layout Standard
Kay: computer can be all other media, and is also active.
 Internet makes all media available everywhere.
 Web 2.0 made it participatory for publishing text, photos, videos.
 Twitter, Flickr, Youtube: one solution per media, no coding needed.
 
\end_layout

\begin_layout Standard
Web 2.0 makes media distribution easier by abstracting away FTP, HTML, etc.
\end_layout

\begin_layout Standard
Maybe Web 2.5 is creative apps online, like Picnik photo editor and TinkerCAD
 3D design software.
 Media creation without desktop software.
\end_layout

\begin_layout Standard
Meemoo makes the modes of production also participatory.
 This makes it possible for people to invent and share new media.
 Web 3.0: web software creation without desktop software (or code)?
\end_layout

\begin_layout Standard
If, as McLuhan proposed, 
\begin_inset Quotes eld
\end_inset

the medium is the message,
\begin_inset Quotes erd
\end_inset

 then what kinds of messages are implied by the metamedium? 
\end_layout

\begin_layout Standard
D.
 Rushkoff argues (Program or Be Programmed) that learning to code opens
 people's eyes to the design of all systems.
 They see that bad design can be fixed.
\end_layout

\begin_layout Subsection
Tools
\end_layout

\begin_layout Standard
From making tools to making toolmakers.
 Tool designer thinks: 
\begin_inset Quotes eld
\end_inset

How will people use this tool?
\begin_inset Quotes erd
\end_inset

 Toolmaker designer thinks: how will tool designers use this tool (to think
 about how people will use their tool)? Thinking about thinking about thinking
 (about thinking?).
 Metaconstructionism? 
\end_layout

\begin_layout Standard
Meemoo will enable people to become tool designers before learning coding
 skills.
\end_layout

\begin_layout Standard
Programming skills distinct from coding skills.
 Visual programming makes the dataflow logic visual.
 With text-based coding you need to keep track of these relationships in
 another way.
\end_layout

\begin_layout Section
Context
\end_layout

\begin_layout Subsection
Computers as abstraction
\end_layout

\begin_layout Subsubsection
Mainframe to PC: Dynabook
\end_layout

\begin_layout Standard
Kay: Promethian effort to bring computation from 
\begin_inset Quotes eld
\end_inset

priesthood
\begin_inset Quotes erd
\end_inset

 of mainframe admins to all people, especially children.
\end_layout

\begin_layout Subsubsection
Programming for kids: Smalltalk, Logo, Scratch, Alice
\end_layout

\begin_layout Standard
Constructionism: getting kids programming gets them to think about thinking.
 The metamedium gives them control.
\end_layout

\begin_layout Subsection
Visual programming languages
\end_layout

\begin_layout Standard
Meemoo is a kind of dataflow visual programming environment.
 This means that on a programming 
\end_layout

\begin_layout Subsection
Free Software movement
\end_layout

\begin_layout Standard
Can't own ideas.
 Why do people give away their work?
\end_layout

\begin_layout Subsection
Open hardware and maker movement
\end_layout

\begin_layout Standard
Arduino modules: Gameduino, heart rate sensor, Lilypad...
 abstracting some of the electronics intricacies into modular components.
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

If you can't open it you don't own it.
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Subsection
JQuery Plugins
\end_layout

\begin_layout Standard
JQuery : plugin :: Meemoo : module
\end_layout

\begin_layout Standard
Large community sharing plugins.
 I made this thing and it is useful to me.
 
\end_layout

\begin_layout Section
Previous work and motivation
\end_layout

\begin_layout Standard
In a way, Meemoo is an abstraction of all of my earlier digital creative
 experiments.
 I plan on rebuilding them in Meemoo to make it easier for me (and others)
 to modify how they work.
 I call it my 
\shape italic
opus sink
\shape default
.
\end_layout

\begin_layout Subsection
Media Bitch (2002), Flash
\end_layout

\begin_layout Standard
http://forresto.com/oldsite/interactive/mbx/mediabitch.html
\end_layout

\begin_layout Subsection
Kaleidocam (2007), Quartz Composer
\end_layout

\begin_layout Standard
https://vimeo.com/387429
\end_layout

\begin_layout Standard
Learning QC and dataflow programming.
\end_layout

\begin_layout Subsection
Megacam (2010), Flash
\end_layout

\begin_layout Standard
http://sembiki.com/megacam
\end_layout

\begin_layout Standard
Webcam apps inspired in part by Lomo cameras.
 I chose presets for each toy to make it simpler, but that also removed
 the possibility to experiment with the variables.
\end_layout

\begin_layout Subsection
Looplab (2010), Pure Data
\end_layout

\begin_layout Standard
https://vimeo.com/16956269 http://www.flickr.com/photos/forresto/5125930908/
\end_layout

\begin_layout Standard
Learning Pure Data.
 Network communcation of identical apps, each passing data to the next.
\end_layout

\begin_layout Subsection
Opera stage projection mapping (2011), Quartz Composer
\end_layout

\begin_layout Standard
Last year I was working on a multi-screen video projection system for the
 set design of an Opera.
 I found Quartz Composer modules for midi control, video playback, and projectio
n mapping.
 I patched them together to create a system that controlled video on four
 projection-mapped screens from one projector.
 These modules were all shared online by their authors in the open-source
 spirit.
 I needed to add a feature to one of them, and was able to do so in XCode.
\end_layout

\begin_layout Standard
Meemoo will make it possible for people to not only share such modules online,
 but also wire them together, experiement, and save output instantly online.
 This will lower the barrier to entry and increase collaboration potential.
\end_layout

\begin_layout Subsection
Web Video Remixer (2011), HTML
\end_layout

\begin_layout Standard
This is the direct parent project of Meemoo, where I figured out how to
 communicate between web pages in iframes.
\end_layout

\begin_layout Section
Development
\end_layout

\begin_layout Standard
Development on Meemoo's ancestor project began in January 2011.
 In October 2011 Meemoo became a Mozilla WebFWD fellow project.
\end_layout

\begin_layout Standard
Meemoo is designed for hackability on all levels.
 On the highest level, people can add and remove modules and reconfigure
 wires without coding knowledge.
 On the lowest level, the entire project is Free software under the MIT
 and AGPL licenses, which guarantee the right to fork the project and change
 how it works at any level.
 
\end_layout

\begin_layout Subsection
Software design for hackability
\end_layout

\begin_layout Standard
One of the goals for the project is that it is hackable on all levels.
 On the lowest level, this means that the code is open source.
\end_layout

\begin_layout Subsubsection
Common communication library for modules
\end_layout

\begin_layout Standard
Each Meemoo module needs to include meemoo.js, which handles message routing.
 The inputs and outputs are then specified as in Algorithm 
\begin_inset CommandInset ref
LatexCommand vref
reference "Defining Inputs and Outputs"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Readable, sharable app source code
\end_layout

\begin_layout Standard
The source code format for a Meemoo app is JSON (JavaScript Object Notation)
 which is fairly easy to read.
 This 
\begin_inset Quotes eld
\end_inset

text blob
\begin_inset Quotes erd
\end_inset

 stores the position, connections, and state of all of the modules in the
 graph (Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Meemoo-App-Source"

\end_inset

).
 Because it is a small amount of text, it is easy to share the app source
 code in email, forums, image descriptions, comments, etc.
\end_layout

\begin_layout Subsection
User experience design for hackability
\end_layout

\begin_layout Subsubsection
Direct manipulation
\end_layout

\begin_layout Standard
Ben Shneiderman 
\begin_inset CommandInset citation
LatexCommand citep
key "Shneiderman1986"

\end_inset


\end_layout

\begin_layout Standard
Visual indication of what is happening in each module.
 (Like TouchDesigner).
 Dragging to change variables.
\end_layout

\begin_layout Subsubsection
Visual programming 
\begin_inset Quotes eld
\end_inset

patching
\begin_inset Quotes erd
\end_inset

 metaphor
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

The use of flexible cords with plugs at their ends and sockets (jacks) to
 make temporary connections dates back to cord-type manually operated telephone
 switchboards (if not even earlier, possibly for telegraph circuits).
 Cords with plugs at both ends had been used for many decades before the
 advent of Dr.
 Moog's synthesizers to make temporary connections ("patches") in such places
 as radio and recording studios.
 These came to be known as "patch cords", and that term was also used for
 Moog modular systems.
 As familiarity developed, a given setup of the synthesizer (both cord connectio
ns and knob settings) came to be referred to as a "patch", and the term
 has persisted, applying to systems that do not use patch cords.
\begin_inset Quotes erd
\end_inset

 - 
\begin_inset CommandInset href
LatexCommand href
name "Wikipedia on Moog"
target "http://en.wikipedia.org/wiki/Moog_synthesizer#Early_history"

\end_inset


\end_layout

\begin_layout Subsection
What is abstracted
\end_layout

\begin_layout Standard
As a programmer, working in Puredata and Quartz Composer can be frustrating.
 Certain logical constructions that would be easy to describe in code become
 a jumbled mess of boxes and wires.
\end_layout

\begin_layout Section
Tests/Results
\end_layout

\begin_layout Subsection
User testing and feedback
\end_layout

\begin_layout Standard
Aino - Camdoodle
\end_layout

\begin_layout Standard
Ginger - 
\begin_inset Quotes eld
\end_inset

You should add an onionskin
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Teemu - Metronome animation
\end_layout

\begin_layout Standard
Jona - 
\begin_inset Quotes eld
\end_inset

Can I use this in my class?
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Facebook Beta group
\end_layout

\begin_layout Subsection
Economic model illustrated with Meemoo
\end_layout

\begin_layout Standard
http://meemoo.org/blog/2012-01-24-friction-free-post-scarcity-creative-economies/
\end_layout

\begin_layout Subsection
Live animation visuals for dance party
\end_layout

\begin_layout Standard
http://www.youtube.com/watch?v=T_tCyYGLWKM
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/meemoo-at-zodiak.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Meemoo at Zodiak
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
I was invited to do visuals for a Zodiak's Side-Step dance festival club
 night.
 I used the gig as an opportunity to push Meemoo development and pressure-test
 the live-animation features.
 
\end_layout

\begin_layout Standard
For the gig I made some special modules for creating a "world" into which
 I could insert animated sprites.
 On the software development side, I'm happy that I decided to make two
 modules (Controller and World) share the same Backbone model.
 Each module has its own view of the same model, so the data passed through
 the wire will be the same on both sides.
\end_layout

\begin_layout Standard
As the party started and I was still coding furiously, adding features to
 the world module.
 Thirty minutes later the music tempo picked up, inviting people to the
 dance floor, and I made myself declare the coding done for the night.
 It was a thrill to see the first sprite hit the dance floor: multicolored
 glitter swirling in water.
\end_layout

\begin_layout Standard
We used clay and construction paper (and some glitter) as the basic building
 blocks of the visuals.
 I'm attracted to the textures and imperfections that come from using materials
 like these.
 Using the taptempo module, I synced the sprites' animation to the rhythm.
 It was fun to build these tiny animations and then throw them onto the
 screens around the dance floor.
 
\end_layout

\begin_layout Standard
There are lots of improvements and ideas that came up in the evening:
\end_layout

\begin_layout Itemize
Camera: I used a Sony Eyetoy webcam, and the color was pretty bad.
 I chose kid's art supplies with rich colors, but most of the color was
 washed out in the first step.
 Next time I'll do some tests to find a better webcam, or use the camera
 on my phone, or a real digital camera somehow.
 
\end_layout

\begin_layout Itemize
Audience participation: I planned to use Kinect to get silhouettes of people
 dancing into the world, but ran out of time.
 I was imagining using different animated textures for specified depth ranges.
 
\end_layout

\begin_layout Itemize
Flocking: I only had time to implement the tiled animation.
 The original concept was that sprites could be individual or flocks that
 would move around the screens.
 
\end_layout

\begin_layout Itemize
UX tweaks: Confirm dialog on every delete got annoying when juggling around
 modules.
 Directly un/replugging wires is a suggestion that is now high on the to-do
 list.
 
\end_layout

\begin_layout Itemize
I made a hack to open the World module in a new window to view it fullscreen
 on the projectors.
 I plan on making this a built-in feature for any module.
\end_layout

\begin_layout Standard
Despite these limitations, I got a lot of good feedback about the visuals.
 People were interested in what I was doing, and came around to play with
 the art supplies.
 Doing dance party visuals powered by a web browser was a fun experiment,
 and with a few more display options I think that the limitations would
 have been less aesthetically obvious.
 Performing under pressure was a good way to test the system.
\end_layout

\begin_layout Standard
Only *once* in the evening did a JavaScript warning pop up on the dance
 floor.
 I consider that a victory, and it made me laugh a lot when it happened.
\end_layout

\begin_layout Section
Future Development
\end_layout

\begin_layout Standard
This idea is bigger than one developer and one master's thesis.
 I plan on finding resources to continue work, and to bring more people
 with varied talents into the project.
\end_layout

\begin_layout Subsection
Community for sharing apps
\end_layout

\begin_layout Standard
Meemoo was designed for sharing.
 Because of the small amount of source code to describe a Meemoo app (Algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Meemoo-App-Source"

\end_inset

) it will be easy to build a scalable platform for sharing and forking apps.
\end_layout

\begin_layout Subsection
Touchscreen support
\end_layout

\begin_layout Standard
Some media observers, myself included, saw the rise of touchscreen devices
 like the iPhone and iPad as a step backwards for participatory media.
 As originally marketed, these devices seemed to be designed primarily for
 media consumption.
 When Apple later opened up the App Store they took a timid step towards
 hackability by allowing third party developers to create apps that extend
 the functionality of the device.
 I say 
\begin_inset Quotes eld
\end_inset

timid
\begin_inset Quotes erd
\end_inset

 because only developers that pay for the privilege can write apps for these
 devices, and only apps that pass an opaque curation process are allowed
 in the App Store.
\end_layout

\begin_layout Standard
Because of this closed ecosystem and technical limitations, the design of
 apps for iOS tend to have low to no hackability.
 In general, an app is designed to do one thing.
 The designer decides what the app does, how it communicates, where things
 can be shared.
 The user then uses the app.
 The designer/user roles tend to be well-defined in this way.
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement O
overhang 15text%
width "30text%"
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/appstore-icon.png
	width 30text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:App-Icon"

\end_inset

App Icon
\end_layout

\end_inset


\end_layout

\end_inset

 The standard icon for an app looks like a shiny glass object (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:App-Icon"

\end_inset

), which mirrors the aesthetics of the device itself.
 It symbolizes something highly designed and polished, not to be opened.
\end_layout

\begin_layout Standard
There are some notable exceptions: apps that encourage coding and exploration.
 These include Codea by Two Lives Left 
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://twolivesleft.com/Codea/"

\end_inset


\end_layout

\end_inset

 for Lua coding, Processing.js Mini-IDE by Brian Jepson 
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://www.jepstone.net/blog/2010/04/16/processing-js-mini-ide-for-ipad-iphone-android-chrome/"

\end_inset


\end_layout

\end_inset

, and GLSL Studio by kode80 
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://glslstudio.com/"

\end_inset


\end_layout

\end_inset

 for OpenGL shaders.
 These three apps are development environments that deal with the affordances
 and constraints of writing code on touchscreen devices in different ways.
 For example, Codea includes some well-designed features for touch-screen
 interaction with widgets embedded in the code, like popup number sliders
 and color pickers.
 However, without an external keyboard, any kind of extended writing on
 touchscreen devices is a difficult task.
 It is also against Apple's regulations to load external scripts in native
 apps, which makes it hard to share code.
\end_layout

\begin_layout Standard
Meemoo has the potential to become a powerful tool for creative programming
 on touchscreen devices.
 Gestures for zooming, panning, and dragging are common in touchscreen interacti
on, and should be tested to make work with Meemoo.
 Zooming and panning already work smoothly, thanks to running in the browser.
 
\end_layout

\begin_layout Standard
There will be a library of modules that will reduce the need to write code.
 
\end_layout

\begin_layout Standard
Meemoo runs in browser, and JavaScript runs slower than native code.
 However, as the power of these devices increases, the kinds of apps that
 can be built with Meemoo will likewise increase.
\end_layout

\begin_layout Subsection
Socket communication
\end_layout

\begin_layout Standard
UX and server for sending arbitrary data from Meemoo on my smartphone to
 my laptop to your tablet (and back).
\end_layout

\begin_layout Subsection
Meemoo hardware
\end_layout

\begin_layout Standard
Cheap computers (Raspberry Pi) + knobs + sliders + physical patch cables
 for performative interaction.
\end_layout

\begin_layout Subsection
Twenty Apps to Build With Meemoo
\end_layout

\begin_layout Standard
In the spirit of Seymour Papert and Cynthia Solomon's 1971 memo, 
\begin_inset Quotes eld
\end_inset

Twenty Things to Do With a Computer,
\begin_inset Quotes erd
\end_inset

 I present this list of potential Meemoo apps:
\end_layout

\begin_layout Enumerate
Instructional puzzle game based on rewiring modules
\end_layout

\begin_layout Enumerate
Kaleidoscope with reconfigurable mirrors
\end_layout

\begin_layout Enumerate
Experiment with video feedback with webcams pointed at screens
\end_layout

\begin_layout Enumerate
Text-to-song generator with computer generated voices singing in harmony
\end_layout

\begin_layout Enumerate
Artistic visualization of data from bio-sensors
\end_layout

\begin_layout Enumerate
Beatbox control of video mashup (sCrAmBlEd?HaCkZ!)
\end_layout

\begin_layout Enumerate
Hourglass module that flows virtual sand to other modules through the wires
\end_layout

\begin_layout Enumerate
TI-83 emulator 
\begin_inset Foot
status open

\begin_layout Plain Layout
Proof-of-concept by Cemetech & Kerm Martian: 
\begin_inset CommandInset href
LatexCommand href
target "http://www.cemetech.net/projects/jstified/jstified.php"

\end_inset


\end_layout

\end_inset

 to draw animations
\end_layout

\begin_layout Enumerate
LOGO emulator 
\begin_inset Foot
status open

\begin_layout Plain Layout
Proof-of-concept by Joshua Bell: 
\begin_inset CommandInset href
LatexCommand href
target "http://www.calormen.com/Logo/"

\end_inset


\end_layout

\end_inset

 to draw animations
\end_layout

\begin_layout Enumerate
A Scratch game that draws different scenery based on location, time, and
 weather data.
 
\end_layout

\begin_layout Enumerate
...
\end_layout

\begin_layout Standard
These examples show how—in the same way that the Internet encompasses all
 past and future media—a hackable creative coding environment that runs
 in the browser can encompass and interact with all other creative coding
 environments.
 The educational philosophies that developed these systems can be hacked,
 updated, and incorporated into new educational goals.
\end_layout

\begin_layout Section
Conclusions
\end_layout

\begin_layout Standard
I contacted Ze Frank to ask if he would be a project advisor.
 He gave me some good things to think about:
\end_layout

\begin_layout Quote
\begin_inset Quotes eld
\end_inset

Creating 'possibility spaces' can be exciting for a number of reasons...
 but also can be a false God.
 It can be an excuse to never to actually grapple with whether there is
 value in the output itself, whether beauty is enough, whether people actually
 want what you are making, etc...
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Making a creative tool maker is pointless if, in the end, nothing creative
 is made.
 My dream is that somebody will make something beautiful with it.
 Shouldn't that somebody be me? If I don't do it, why would anybody else?
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% bib stuff
\end_layout

\begin_layout Plain Layout


\backslash
addtocontents{toc}{
\backslash
protect
\backslash
vspace{
\backslash
beforebibskip}}
\end_layout

\end_inset

 
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "MeemooReferences"
options "bibtotoc,plainnat"

\end_inset

 
\end_layout

\begin_layout Section*
Appendix
\end_layout

\begin_layout Standard

\size small
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout LyX-Code

\family roman
\size small
\begin_inset Caption

\begin_layout Plain Layout
Defining Inputs and Outputs (JavaScript)
\begin_inset CommandInset label
LatexCommand label
name "Defining Inputs and Outputs"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
\noindent
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "children/define-inputs-outputs-example.js"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent

\size small
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout

\size small
\begin_inset Caption

\begin_layout Plain Layout
Meemoo App Source Code (JSON)
\begin_inset CommandInset label
LatexCommand label
name "alg:Meemoo-App-Source"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent

\family typewriter
\size small
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "children/meemoo-graph-source.js"

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
