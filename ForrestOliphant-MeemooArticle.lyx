#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass classicthesis
\begin_preamble
% article example for classicthesis.sty
 % KOMA-Script article 
\usepackage{lipsum}%\usepackage{../classicthesis-ldpkg}
\usepackage[nochapters]{classicthesis}% nochapters
\let\oldtitle\title
\renewcommand{\title}[1]{\oldtitle{\rmfamily\normalfont\spacedallcaps{#1}}}
\let\oldauthor\author
\renewcommand{\author}[1]{\oldauthor{\spacedlowsmallcaps{#1}}}
\date{}
\end_preamble
\options paper=a4,fontsize=10pt
\use_default_options false
\master ForrestOliphant-MeemooThesis.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "urlcolor=webbrown,linkcolor=Blue,citecolor=webgreen"
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine natbib_authoryear
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Quote

\emph on
The power to understand, modify, and create new media tools should not be
 restricted to those with a freakish knack for manipulating abstract symbols.

\emph default
 
\end_layout

\begin_layout Quote
--- Paraphrased from Bret Victor's 
\begin_inset Quotes eld
\end_inset

Kill Math
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citeyearpar
key "Victor2011"

\end_inset


\end_layout

\begin_layout Standard
The people that created the vision of the personal computer in the late
 1960s wanted everybody to be able to create their own tools.
 Learning traditional computer programming still takes a major commitment,
 and most people are satisfied with the tools that come with the computer
 or are offered as services online.
 The barrier to entry to learning traditional programming involves setting
 up a programming environment, learning different systems for creating presentat
ion and logic, and learning different programming and markup languages and
 syntaxes.
\end_layout

\begin_layout Standard
People that overcome these barriers to entry are able to create software
 tools for themselves and others.
 People that create tools that are open to modification afford other people
 the ability to learn from their tools and build new tools on the old.
 
\end_layout

\begin_layout Standard
I wanted to combine my programming experience with visual programming and
 creative web applications to make a framework for my own web experiments.
 I realized that I could make something with creative value to a wider audience
 by considering audiences for the framework other than myself -- programmers
 and non-programmers alike.
 Such a tool could invite people without coding experience to modify software
 tools and create their own.
 To this end, I have designed and created a web-based framework called Meemoo.
 
\end_layout

\begin_layout Standard
The main objectives of this project are:
\end_layout

\begin_layout Itemize
Design a modular dataflow visual programming framework using web technologies.
 
\end_layout

\begin_layout Itemize
The framework should afford non-coders the ability to modify creative web
 apps by configuring wires that represent how modules communicate.
 There should be a simple syntax to define the inputs and outputs of a module.
 
\end_layout

\begin_layout Itemize
Apps created with the framework should have source code that is easy to
 read and share.
\end_layout

\begin_layout Itemize
Web developers should be able create new modules for the framework using
 a simple standard.
\end_layout

\begin_layout Standard
Within this framework, an 
\emph on
app
\emph default
 is a collection of modules and the wires that connect them.
 A 
\emph on
module
\emph default
 is a web page that can live anywhere online, and use any web technology.
 This web page includes JavaScript that defines the module's inputs and
 outputs: what data is accepted, how the data is processed, and what kind
 of data will be sent.
 The 
\emph on
wires
\emph default
 define where each module sends data.
 The source code of the app that defines an its layout, routing, and state
 can be saved and shared with a small amount of text.
 
\end_layout

\begin_layout Standard
Meemoo apps run in the web browser, so they will be able to run the same
 on PCs, smartphones, tablet computers, and soon TVs.
 Modifying and making new apps is done in the same browser interface, so
 no external developer tools are needed.
\end_layout

\begin_layout Standard
Meemoo is programmed by connecting boxes with wires (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Meemoo-screen-shot"

\end_inset

), putting programming within reach of non-coders.
 In the course of this thesis I will refer to 
\emph on
programming
\emph default
 and 
\emph on
coding
\emph default
 as distinct skills.
 Learning to program is a process of learning to manipulate logical structures.
 Learning to code puts those structures into a linear-textual format that
 computers can parse.
 Different programmable systems emphasize and abstract these aspects differently.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/screenshot-cam-paint.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Meemoo screen-shot (March 2012)
\begin_inset CommandInset label
LatexCommand label
name "fig:Meemoo-screen-shot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
So far I have focused module development on realtime animation tools, as
 this makes it simple to explain and engage creatively with the concept.
 It is not limited to animation though; any app or system that can be described
 by a dataflow graph can be made into a Meemoo app.
 
\end_layout

\begin_layout Standard
I did not start making Meemoo as an educational tool, but I have since been
 influenced by software projects inspired by Constructionist learning theory:
 Logo, Smalltalk, and Scratch.
 As I have read texts on Constructionism, I have seen many parallels to
 my own experiences as a learner.
 I think that Meemoo has the potential to be a good tool for learning by
 making.
 
\end_layout

\begin_layout Standard
This thesis consists of Meemoo
\begin_inset Foot
status open

\begin_layout Plain Layout
Demos and source available at 
\begin_inset CommandInset href
LatexCommand href
target "http://meemoo.org/"

\end_inset


\end_layout

\end_inset

, which is a framework for hackable web apps.
\end_layout

\begin_layout Chapter
Context
\end_layout

\begin_layout Standard
Meemoo has many influences and precedents in the way that it has been designed,
 some direct and others indirect.
\end_layout

\begin_layout Section
Hackers and Hackability
\end_layout

\begin_layout Standard

\emph on
The Jargon File
\emph default
, a reference and glossary started in 1973, gives eight definitions for
 
\begin_inset Quotes eld
\end_inset

hacker.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Quote
hacker: n.
 [originally, someone who makes furniture with an axe]
\end_layout

\begin_layout Quote
1.
 A person who enjoys exploring the details of programmable systems and how
 to stretch their capabilities, as opposed to most users, who prefer to
 learn only the minimum necessary.
 RFC1392, the Internet Users' Glossary, usefully amplifies this as: A person
 who delights in having an intimate understanding of the internal workings
 of a system, computers and computer networks in particular.
\end_layout

\begin_layout Quote
...
\end_layout

\begin_layout Quote
8.
 [deprecated] A malicious meddler who tries to discover sensitive information
 by poking around.
 Hence password hacker, network hacker.
 The correct term for this sense is cracker.
\end_layout

\begin_layout Quote
\begin_inset CommandInset citation
LatexCommand citep
key "Raymond2003"

\end_inset


\end_layout

\begin_layout Standard
The eighth definition, despite being deprecated in the Jargon File, has
 become the popular understanding of 
\begin_inset Quotes eld
\end_inset

hacker.
\begin_inset Quotes erd
\end_inset

 For the purpose of this thesis and project I will use and promote the first
 definition.
 
\begin_inset Marginal
status open

\begin_layout Plain Layout
Hackability: n.
 design that encourages understanding and modification.
\end_layout

\end_inset

 In this context, 
\begin_inset Quotes eld
\end_inset

hackability
\begin_inset Quotes erd
\end_inset

 refers to design that encourages understanding of the workings of a system,
 in a addition to the ability to modify said system.
\end_layout

\begin_layout Standard
It might be a lost cause to try to reclaim this term from its common cultural
 understanding.
 The Maker Movement, which also places value in understanding and modifying
 systems and things, does not have such negative baggage with their moniker,
 as 
\begin_inset Quotes eld
\end_inset

make
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

maker
\begin_inset Quotes erd
\end_inset

 seem like more constructive terms.
 Although it is not perfect, I will stick to the term 
\begin_inset Quotes eld
\end_inset

hackability,
\begin_inset Quotes erd
\end_inset

 as I think that it encompasses the spirit that I want to promote with regards
 to software.
 There are other projects that are embracing this meaning as well, such
 as Hackity Hack!
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://hackety.com/"

\end_inset


\end_layout

\end_inset

 and Mozilla Hackasaurus
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://hackasaurus.org/"

\end_inset


\end_layout

\end_inset

, both aimed at getting children to explore coding.
\end_layout

\begin_layout Standard
Pekka Himanen describes 
\begin_inset Quotes eld
\end_inset

The Hacker Ethic
\begin_inset Quotes erd
\end_inset

 as a work ethic based on passionate curiosity.
 This drive to make and tinker is not limited to high tech systems; it manifests
 itself in other interests such as carpentry or textile craft.
 It stands in contrast to Max Weber's "Protestant work ethic," which is
 based on a sense of duty and responsibility.
 
\begin_inset CommandInset citation
LatexCommand citep
after "p. 3-8"
key "Himanen2001"

\end_inset


\end_layout

\begin_layout Standard
Designing for hackability implies respect.
 The designer of a hackable thing acknowledges that they cannot imagine
 every potential use, so they enable people to modify it to their will and
 connect it to other things.
 This quality can apply to software, physical artifacts, and services.
\end_layout

\begin_layout Standard
For software to be hackable the source code should be available under a
 Free license.
 While this enables other people with coding skills to modify a software
 project, I would like to expand the affordances of software hackability
 to non-coders.
\end_layout

\begin_layout Subsection
iOS
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement o
overhang 4cm
width "3.5cm"
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/appstore-icon.png
	width 3.5cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:App-Icon"

\end_inset

App Icon
\end_layout

\end_inset


\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
I saw the rise of touchscreen devices like the iPhone and iPad as a step
 backwards for participatory media.
 As originally marketed, these devices were designed primarily for media
 consumption 
\begin_inset CommandInset citation
LatexCommand citep
key "Jobs2007"

\end_inset

.
 The only media production capabilities afforded by these devices was taking
 and sharing photos.
 When Apple later opened up the App Store they took a timid step towards
 hackability by allowing third party developers to create apps that extend
 the functionality of the device.
 I say 
\begin_inset Quotes eld
\end_inset

timid
\begin_inset Quotes erd
\end_inset

 because only developers that pay for the privilege can write apps for these
 devices, and only apps that pass an opaque curation process are allowed
 in the App Store 
\begin_inset CommandInset citation
LatexCommand citep
key "Gruber2009"

\end_inset

.
\end_layout

\begin_layout Standard
Because of this closed ecosystem and technical limitations, the design of
 apps for iOS tend to have low to no hackability.
 In general, an app is designed to do one thing.
 The designer decides what the app does, how it communicates, where things
 can be shared.
 The 
\begin_inset Quotes eld
\end_inset

user
\begin_inset Quotes erd
\end_inset

 then uses the app.
 The demarcation between the designer and user roles are well-defined in
 this way.
\end_layout

\begin_layout Standard
The standard icon for an app looks like a shiny glass object (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:App-Icon"

\end_inset

), which mirrors the aesthetics of the device itself.
 It symbolizes something highly designed and polished, not to be opened.
 For both the device and the apps that run on it, the design implies 
\begin_inset Quotes eld
\end_inset

no user serviceable parts inside.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
There are some apps designed for media creation.
 Garageband
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Garageband: 
\begin_inset CommandInset href
LatexCommand href
target "http://www.apple.com/ipad/from-the-app-store/apps-by-apple/garageband.html"

\end_inset


\end_layout

\end_inset

 and Photoshop Touch
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Photoshop Touch: 
\begin_inset CommandInset href
LatexCommand href
target "http://www.adobe.com/products/photoshop-touch.html"

\end_inset


\end_layout

\end_inset

 for iOS are tools for music creation and image manipulation designed for
 touchscreens.
 These tools are each highly designed for one kind of media creation.
 These apps don't afford any scripting-based hackability, and can only communica
te with services that the designers have chosen.
\end_layout

\begin_layout Standard
There are some apps that do allow some programming-based hackability: apps
 that are code editors.
 These include Codea
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Codea: 
\begin_inset CommandInset href
LatexCommand href
target "http://twolivesleft.com/Codea/"

\end_inset


\end_layout

\end_inset

 by Two Lives Left for Lua, Processing.js Mini-IDE
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Processing.js Mini-IDE: 
\begin_inset CommandInset href
LatexCommand href
target "http://www.jepstone.net/blog/2010/04/16/processing-js-mini-ide-for-ipad-iphone-android-chrome/"

\end_inset


\end_layout

\end_inset

 by Brian Jepson, and GLSL Studio
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
GLSL Studio: 
\begin_inset CommandInset href
LatexCommand href
target "http://glslstudio.com/"

\end_inset


\end_layout

\end_inset

 by kode80 for OpenGL shaders.
 These three apps are development environments that deal with the affordances
 and constraints of writing code on touchscreen devices in different ways.
 For example, Codea uses the affordances of touch-screen interaction to
 manipulate variables with widgets embedded in the code, like popup number
 sliders and color pickers.
 
\end_layout

\begin_layout Standard
However, without an external keyboard, any kind of extended writing on touchscre
en devices is a difficult task.
 It is also against Apple's regulations to load external scripts in native
 apps, which makes it hard to share code.
 Code that you write in these apps can only run in the 
\begin_inset Quotes eld
\end_inset

walled garden
\begin_inset Quotes erd
\end_inset

 of the app itself.
\end_layout

\begin_layout Section
Metamedia
\end_layout

\begin_layout Standard
The Dynabook was a research project of Xerox Palo Alto Research Center in
 1968.
 It was a concept design that envisioned the personal computer, more or
 less as we know it today.
 Alan Kay outlines some of the goals and philosophical influences of the
 project:
\end_layout

\begin_layout Quote
\begin_inset Quotes eld
\end_inset

Putting all this together, we want an apparently free environment in which
 exploration causes desired sequences to happen (Montessori); one that allows
 kinesthetic, iconic, and symbolic learning -- "doing with images makes
 symbols" (Piaget & Bruner); the user is never trapped in a mode (GRAIL);
 the magic is embedded in the familiar (Negroponte); and which acts as a
 magnifying mirror for the user's own intelligence (Coleridge).
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
key "Kay1996"

\end_inset


\end_layout

\begin_layout Standard
Alan Kay and Adele Goldberg coined the term 
\begin_inset Quotes eld
\end_inset

metamedium
\begin_inset Quotes erd
\end_inset

 to describe their vision of the computer as a medium that can be all other
 media.
 Unlike broadcast media which is passively consumed, computer media can
 also be participatory and active.
 This means that people can create and consume media on the same tool.
 
\begin_inset CommandInset citation
LatexCommand citep
key "Kay1977"

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Quotes eld
\end_inset

I suggest that Kay and others aimed to create a particular kind of new media
 -- rather than merely simulating the appearances of old ones.
 These new media use already existing representational formats as their
 building blocks, while adding many new previously nonexistent properties.
 At the same time, as envisioned by Kay, these media are expandable -- that
 is, users themselves should be able to easily add new properties, as well
 as to invent new media.
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
key "Manovich2008"

\end_inset


\end_layout

\begin_layout Section
The Internet
\end_layout

\begin_layout Standard
If the computer is the metamedium, then the Internet is the metanetwork.
 
\end_layout

\begin_layout Subsection
Web 2.0
\end_layout

\begin_layout Standard
The term 
\begin_inset Quotes eld
\end_inset

Web 2.0
\begin_inset Quotes erd
\end_inset

 was defined and clarified by Tim O'Reilly in 2005.
\end_layout

\begin_layout Standard
One aspect of this trend is the rise of online services that facilitate
 publishing content.
 This began with blogging services like LiveJournal in 1999, photo sharing
 sites like Flickr in 2004, and video sharing sites like Youtube in 2005.
 These services helped make the web more participatory, giving any person
 with internet access the ability to publish text, images, and video.
 These participatory platforms make media distribution easier by abstracting
 away the need to learn about web servers and HTML.
 
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement o
overhang 4cm
width "6cm"
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/choose-your-own-youtube.png
	width 6cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The Gilady Land Interactive Story
\begin_inset CommandInset label
LatexCommand label
name "fig:The-Gilady-Land"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
While these services enable publishing of content, they are limited in how
 they can be used.
 The typical service presents a form with input fields for title, media
 file, description, and tags.
 This information then creates a single web page.
\end_layout

\begin_layout Standard
Some people have worked within these constraints to create interactive media
 using hyperlinks.
 For example, Youtube user TimsPuppetPals make a collection of videos called
 
\begin_inset Quotes eld
\end_inset

The Gilady Land Interactive Story.
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

The Gilady Land Interactive Story
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset href
LatexCommand href
target "http://youtu.be/spVMyoUcuR4"

\end_inset


\end_layout

\end_inset

 One video is the entry into the story, and the rest of the videos are unlisted
 within the Youtube sytem.
 In the end of each section of the story, viewers are presented with two
 choices as hyperlinks within the video (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Gilady-Land"

\end_inset

).
 Interactive stories based on hyperlinking are limited to this kind of choose-yo
ur-own-adventure branching storyline.
 
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement o
overhang 4cm
width "6cm"
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/play-the-piano.png
	width 6cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Play the Piano
\begin_inset CommandInset label
LatexCommand label
name "fig:Play-the-Piano"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Another example of simple interactivity with hyperlinks is 
\begin_inset Quotes eld
\end_inset

Play the piano
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

Play the piano
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset href
LatexCommand href
target "http://youtu.be/oD-sSolVDiY"

\end_inset


\end_layout

\end_inset

 from Youtube user kokokaka3000.
 This interactive video uses hyperlinks overlaid on each key of piano keyboard.
 As you click on the links above each key, the video skips to a finger playing
 that key (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Play-the-Piano"

\end_inset

).
\end_layout

\begin_layout Standard
In order to create interactivity more complex than these two examples, some
 form of programming is needed, and it must be hosted outside of the service.
\end_layout

\begin_layout Standard
An example of a project with more complex interactivity is Darren Solomon's
 
\begin_inset Quotes eld
\end_inset

In B Flat.
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

In B Flat
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset href
LatexCommand href
target "http://www.inbflat.net/"

\end_inset


\end_layout

\end_inset

 To create this project, Solomon solicited videos of people making simple
 music in the same key.
 He then embedded twenty of these videos in a grid in one HTML page (Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:In-B-Flat"

\end_inset

).
 To interact with the piece, you press play on any or all of the videos
 in any order.
 Because of the floating nature of the music in all of the samples, they
 tend to sound good together no matter how they are mixed.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/in-b-flat.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
In B Flat
\begin_inset CommandInset label
LatexCommand label
name "fig:In-B-Flat"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The structure of 
\begin_inset Quotes eld
\end_inset

In B Flat
\begin_inset Quotes erd
\end_inset

 -- multiple videos that can be independently controlled in one HTML page
 -- can be considered a new media afforded by the participatory nature of
 Youtube, and the ease of embedding videos.
 The ability to create this new media required HTML coding knowledge.
 
\end_layout

\begin_layout Standard
Youtube's embeddable player has a JavaScript Player API (Application Programming
 Interface)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
YouTube JavaScript Player API 
\begin_inset CommandInset href
LatexCommand href
target "https://developers.google.com/youtube/js_api_reference"

\end_inset


\end_layout

\end_inset

 which makes more complex interactivity possible.
 Flickr's API
\begin_inset Foot
status open

\begin_layout Plain Layout
Flickr's API: 
\begin_inset CommandInset href
LatexCommand href
target "http://www.flickr.com/services/api/"

\end_inset


\end_layout

\end_inset

 has enabled developers to create applications that can access and edit
 Flickr's massive database of photos and metadata
\begin_inset Foot
status open

\begin_layout Plain Layout
An example Flickr application by the author: 
\begin_inset CommandInset href
LatexCommand href
target "http://taggraph.com/"

\end_inset


\end_layout

\end_inset

.
 These APIs increase the web's hackability, but only for people with coding
 skills.
\end_layout

\begin_layout Section
Tools
\end_layout

\begin_layout Quote
\begin_inset Quotes eld
\end_inset

The ability to 'read' a medium means that you can access materials and tools
 generated by others.
 The ability to 'write' a medium means you can generate materials and tools
 for others.
 You must have both to be literate.
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
key "Kay1990"

\end_inset


\end_layout

\begin_layout Standard
Many digital tools have precedents in avant-garde art practices.
 In 1959 Brion Gysin manually 
\begin_inset Quotes eld
\end_inset

hacked
\begin_inset Quotes erd
\end_inset

 text with scissors, recombining the fragments to see what might be found
 
\begin_inset CommandInset citation
LatexCommand citep
key "Burroughs1961"

\end_inset

.
 Word processing software can be seen as a tool that affords greater hackability
 to text.
 In 1972 DJ Kool Herc manually mixed two records to give partygoers a longer
 percussive break to dance to 
\begin_inset CommandInset citation
LatexCommand citep
key "Hermes2006"

\end_inset

.
 Non-linear audio editors afford greater hackability to music, which has
 lead to different kinds of remixing.
 Although the art practices did not directly lead to the software tool developme
nt, both come from the same impulse to combine and recontextualize the world
 around us.
 
\begin_inset CommandInset citation
LatexCommand citep
after "p. 13"
key "Manovich2003"

\end_inset


\end_layout

\begin_layout Standard
These digital tools are designed to afford hackability to one particular
 kind of media.
 Meemoo is designed to afford hackability to the tools themselves.
 Meemoo is a toolmaker that makes it easier for people to create and modify
 their own digital tools and therefore to invent new media.
 
\end_layout

\begin_layout Subsection
Direct manipulation
\end_layout

\begin_layout Standard
Bret Victor gave a talk called 
\begin_inset Quotes eld
\end_inset

Inventing on Principle
\begin_inset Quotes erd
\end_inset

 at the 2012 Canadian University Software Engineering Conference in which
 he demonstrated an experimental code editor 
\begin_inset CommandInset citation
LatexCommand citep
key "Victor2012"

\end_inset

.
 His editor shows the output of the code in real-time, without needing to
 change windows, compile, or save and refresh.
 Any number or color in the source code opens a slider or color picker,
 which immediately changes the visual output (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Direct-manipulation-of"

\end_inset

).
 As somebody with experience coding visual applications in JavaScript, Flash,
 and Processing, this demonstration was like seeing the light.
 Suddenly I could see that each mode change in my normal workflow is a waste
 of time and mental energy -- the need to save or recompile, change modes,
 and refresh between changing code and seeing the result.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/bret-victor-tree-tall.png
	width 50text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/bret-victor-tree-small.png
	width 50text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Bret Victor's direct manipulation of code 
\begin_inset CommandInset label
LatexCommand label
name "fig:Direct-manipulation-of"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Programming for children
\end_layout

\begin_layout Standard
While Meemoo was not designed specifically for children, it shares with
 these projects the goal of lowering the barrier to entry to programming.
 
\end_layout

\begin_layout Subsection
Logo
\end_layout

\begin_layout Standard
Seymour Papert studied under Jean Piaget, an educational philosopher who
 outlined stages of mental development into a model of learning called 
\begin_inset Quotes eld
\end_inset

constructivism.
\begin_inset Quotes erd
\end_inset

 The basic idea is that people build knowledge structures through experiences.
 Papert added to this model, proposing that learning happens best when 
\begin_inset Quotes eld
\end_inset

the learner is consciously engaged in constructing a public entity, whether
 it's a sand castle on the beach or a theory of the universe
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
after "p. 1"
key "Papert1991"

\end_inset

.
 This idea is called 
\begin_inset Quotes eld
\end_inset

constructionism.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Papert realized that the computer, as a metamedium, could be a powerful
 learning tool if students were able to create their own programs.
 Logo was designed as a simplified programming language for exploring mathematic
s.
 The first tests of Logo in the classroom predated the personal computer,
 sending code from a teletype terminal in the classroom to a remote mainframe
 computer 
\begin_inset CommandInset citation
LatexCommand citep
after "p. 6"
key "Papert1991"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement o
overhang 4cm
width "3.5cm"
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/logo-star.png
	width 3.5cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Logo-star"

\end_inset

 Logo turtle drawing a star
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
As computers became smaller and more common in classrooms, the signature
 Logo turtle was added to the system.
 This was a graphical representation of a turtle that would draw lines on
 the screen based on the instructions given by the child.
 For example, 
\begin_inset Quotes erd
\end_inset


\family typewriter
repeat 5 [ fd 100 rt 144 ]
\family default

\begin_inset Quotes erd
\end_inset

 tells the turtle 
\begin_inset Quotes eld
\end_inset

do this five times: walk forward 100 units, then turn 144 degrees to the
 right.
\begin_inset Quotes erd
\end_inset

 This small program draws a star (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Logo-star"

\end_inset

).
 By making the commands relative to the current position of the turtle,
 the language is easier to learn than a graphical drawing system based on
 Cartesian coordinates 
\begin_inset CommandInset citation
LatexCommand citep
after "p. 171"
key "Papert1993"

\end_inset

.
\end_layout

\begin_layout Subsection
Smalltalk
\end_layout

\begin_layout Standard
A fundamental requirement for the DynaBook research project was to create
 a system that could be programmed by the user.
 Kay invented Smalltalk and object-oriented programming for the Dynabook
 prototype system to lower the barrier to entry for coding.
 Object-oriented programming splits code into logical classes that define
 the data for the object and the methods that access or modify that data.
 By splitting the code like this it becomes easier to organize and navigate
 more complex projects.
\end_layout

\begin_layout Standard
In tests some children programmed their own tools, like a twelve-year-old
 girl's painting application and a fifteen-year-old boy's circuit design
 application.
 Kay later referred to these impressive results as "early success syndrome."
 
\begin_inset Quotes eld
\end_inset

The successes were real, but they weren't as general as we thought.
\begin_inset Quotes erd
\end_inset

 Kay later decided that learning to program might be as difficult as learning
 to write, and take years to build up the mental models necessary to do
 it correctly.
 
\begin_inset CommandInset citation
LatexCommand citep
key "Kay1996"

\end_inset


\end_layout

\begin_layout Subsection
Scratch
\end_layout

\begin_layout Standard
Text-based programming languages have different requirements for syntax
 and indentation that if not followed perfectly will result in programs
 that do not run as expected (or at all).
 This can be frustrating for beginners and experienced coders alike -- most
 of my programming errors are missing semicolons or mismatched brackets.
 The creators of Scratch designed a coding system that works around syntax
 and the frustration of syntax errors.
\end_layout

\begin_layout Standard
Scratch uses drag-and-drop 
\begin_inset Quotes eld
\end_inset

code blocks
\begin_inset Quotes erd
\end_inset

 instead of a text-based syntax, which makes coding less error-prone for
 beginners.
 These code blocks snap together only in ways that make syntactic sense.
 
\begin_inset Quotes eld
\end_inset

Control structures (like 
\family typewriter
forever
\family default
 and 
\family typewriter
repeat
\family default
) are C-shaped to suggest that blocks should be placed inside them.
 Blocks that output values are shaped according to the types of values they
 return: ovals for numbers and hexagons for Booleans.
 Conditional blocks (like 
\family typewriter
if
\family default
 and 
\family typewriter
repeat-until
\family default
) have hexagon-shaped voids, indicating a Boolean is required.
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
key "Resnick2009"

\end_inset


\end_layout

\begin_layout Standard
Although creating a script with code blocks is more like snapping Legos
 together than writing code, it is still coding.
 The shape of the control structures is a direct metaphor to how code works,
 and more visually obvious than brackets or indentation.
 I imagine those logical structures are transferable to textual coding.
\end_layout

\begin_layout Standard
I feel a little cheated to not have had Scratch when I was a child.
 I would have loved it.
 I extended my graphing calculator scripting experiments from high school
 with an absurdist animation of a cat running into walls and reciting Fibonacci
 numbers
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Fibonacci Cat! by the author: 
\begin_inset CommandInset href
LatexCommand href
target "http://scratch.mit.edu/projects/forresto/2398409"

\end_inset


\end_layout

\end_inset

 (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Fibonacci-Cat"

\end_inset

).
 I did not have this final output planned from the start.
 The available blocks influenced the direction of my exploration.
 For example, the last change was adding the drum sound when I saw that
 it was as easy as adding one more block to the script.
 Making something with comparable collision detection, color cycling, and
 audio triggering in Flash or Processing would have taken much longer.
\end_layout

\begin_layout Standard
This was my first Scratch project, and from launching the environment for
 the first time it only took about thirty minutes to snap it together.
 Granted, I am an experienced coder, but I try new languages and coding
 systems on occasion, and Scratch was by far the fastest and easiest to
 create something interesting.
 I look forward to playing with it more.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/fibonacci-cat-script.png
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Script
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/fibonacci-cat-program.png
	width 55text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Output
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Fibonacci Cat! Scratch program by the author 
\begin_inset CommandInset label
LatexCommand label
name "fig:Fibonacci-Cat"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In Scratch each element on the screen is a 
\begin_inset Quotes eld
\end_inset

sprite
\begin_inset Quotes erd
\end_inset

 with its own variables and scripts.
 This makes Scratch compositions object-oriented by default, as it would
 be hard to do it any other way.
\end_layout

\begin_layout Standard
Code can be changed as the project is running, and the results change immediatel
y
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This works best with some kinds of code edits, like changing variables or
 colors.
 Moving larger blocks sometimes requires restarting the project.
\end_layout

\end_inset

.
 This brings direct manipulation to coding, in that changes in the code
 can be seen in real-time, without recompiling or refreshing.
 This would be a valuable feature for any programming environment, and it
 is especially helpful for beginning programmers.
\end_layout

\begin_layout Section
Visual programming languages
\end_layout

\begin_layout Standard
Meemoo is a kind of dataflow visual programming environment.
 This means that programming is done by connecting modules with wires.
 The modules can hold and process arbitrary data: text, audio, images.
 The wires define and visualize how data moves from module to module.
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement O
overhang 4cm
width "6cm"
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/rand-grail-visual-dataflow.jpg
	width 6cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
GRAIL
\begin_inset CommandInset label
LatexCommand label
name "fig:GRAIL"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
GRAIL (GRAphical Input Language) was an early experimental dataflow environment
 developed by the Rand Corporation from 1967 to 1969 (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GRAIL"

\end_inset

).
 This interface was driven by a graphics tablet, so everything could be
 done without a keyboard.
 Nodes were added by drawing a box in place.
 Edges were drawn from node to node.
 Labels were added to the nodes with handwriting recognition.
 Edges were disconnected by scribbling over them.
 
\begin_inset CommandInset citation
LatexCommand citep
after "p. 3"
key "Ellis1969b"

\end_inset

 
\end_layout

\begin_layout Standard
Kay credited the project with directly inspiring some of the user interface
 elements in the DynaBook system, like windows that were resizable by dragging
 the corner.
 
\begin_inset Quotes eld
\end_inset

It was direct manipulation, it was analogical, it was modeless, it was beautiful.
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
key "Kay1996"

\end_inset


\end_layout

\begin_layout Standard
Visual programming is used most in the domain of real-time audio processing
 and synthesis (Pure Data and Max/MSP), visual effects (Quartz Composer
 and vvvv), and 3D material and shading design (Softimage Interactive Creative
 Environment) 
\begin_inset CommandInset citation
LatexCommand citep
key "Morrison2010"

\end_inset

.
 This is probably due to the fact that people involved in audio/visual productio
n tend to be comfortable with connecting equipment with cables, so it is
 much easier to learn a system based on this metaphor than to learn a system
 based on linear-textual coding.
\end_layout

\begin_layout Standard
One precedent for web-based visual programming is Yahoo! Pipes (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Yahoo!-Pipes"

\end_inset

).
 This web application was released in 2007 with the goal 
\begin_inset Quotes eld
\end_inset

assemble personalized information sources out of existing Web services and
 data feeds
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
key "Sadri2007"

\end_inset

.
 While Pipes has a focus on asynchronous data processing, Meemoo is designed
 for real-time creativity.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/yahoo-pipes.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Yahoo! Pipes layout that watches eBay for items with a search term and price
 range 
\begin_inset CommandInset label
LatexCommand label
name "fig:Yahoo!-Pipes"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Free Software Movement
\end_layout

\begin_layout Standard
Richard Stallman wrote the 
\begin_inset Quotes eld
\end_inset

The GNU Manifesto
\begin_inset Quotes erd
\end_inset

 in 1985 at the start of the GNU project.
 In it he explains that software should be free, meaning that the source
 should be available to examine and modify.
 He framed his argument in terms of personal honor, 
\begin_inset Quotes eld
\end_inset

I consider that the Golden Rule requires that if I like a program I must
 share it with other people who like it.
\begin_inset Quotes erd
\end_inset

 He also advanced the practical argument that free software would prevent
 
\begin_inset Quotes eld
\end_inset

wasteful duplication
\begin_inset Quotes erd
\end_inset

 of programming effort which could instead be used 
\begin_inset Quotes eld
\end_inset

advancing the state of the art.
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
key "Stallman1985"

\end_inset


\end_layout

\begin_layout Standard
In my programming experience, this has proven to be the main benefit of
 free software.
 Meemoo relies heavily on two JavaScript libraries that are free software,
 JQuery
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
JQuery: 
\begin_inset CommandInset href
LatexCommand href
target "http://jquery.com/"

\end_inset


\end_layout

\end_inset

 and Backbone.js
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Backbone.js: 
\begin_inset CommandInset href
LatexCommand href
target "http://documentcloud.github.com/backbone/"

\end_inset


\end_layout

\end_inset

.
 Both of these libraries are written by communities of people who are (collectiv
ely) much better programmers than me.
 They design these libraries to be helpful for other programmers, and give
 them away under open-source licenses.
\end_layout

\begin_layout Standard
JQuery abstracts away many browser differences, making it much easier to
 write code that runs the same on different browsers.
 Backbone.js provides structure for the data models, views, and collections
 that are required to make a complex maintainable web application.
 This makes it easier to keep track of the data structures and state of
 the apps, modules, and wires in Meemoo.
 
\end_layout

\begin_layout Standard
I can confidently say that without these libraries Meemoo wouldn't exist.
 My programming knowledge is built on viewing and using source code made
 by other people.
\end_layout

\begin_layout Standard
It is not just the JavaScript libraries that Meemoo is built on that are
 free and open-source.
 Free software powers the majority of the web.
 As of March 2012 65% of web servers run the free Apache HTTP Server, versus
 14% that run Microsoft's closed-source server software 
\begin_inset CommandInset citation
LatexCommand citep
key "Netcraft2012"

\end_inset

.
 There are several open-source languages (PHP, Ruby, Python) that run on
 those servers and many open-source frameworks (Symfony, Rails, Django)
 written in those languages.
 There are two competitive free browser implementations that push web standards
 and innovation: Gecko (Firefox) and Webkit (Safari and Chrome).
 Firefox is 
\begin_inset Quotes eld
\end_inset

the most widely used consumer-facing piece of free software ever
\begin_inset Quotes erd
\end_inset

 and Webkit has the backing of two of the largest technology companies,
 Apple and Google 
\begin_inset CommandInset citation
LatexCommand citep
key "Villa2010"

\end_inset

.
\end_layout

\begin_layout Section
Plugin architecture
\begin_inset CommandInset label
LatexCommand label
name "sec:Plugin-architecture"

\end_inset


\end_layout

\begin_layout Standard
Successful frameworks are designed to enable community members to make and
 share 
\begin_inset Quotes eld
\end_inset

plugins
\begin_inset Quotes erd
\end_inset

 that extend the capabilities of the framework.
\end_layout

\begin_layout Subsection
JQuery
\end_layout

\begin_layout Standard
JQuery is hackable by virtue of its open-source license, but it is also
 hackable because it provides mechanisms for programmers to extend it with
 plugins.
 There is no official repository of plugins, but one site dedicated to jQuery
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
jQuery4u plugins directory: 
\begin_inset CommandInset href
LatexCommand href
target "http://www.jquery4u.com/plugins/"

\end_inset


\end_layout

\end_inset

 claims to have over 2000 listed in their directory.
 The only JQuery plugin that I'm using for Meemoo is the official JqueryUI
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
JqueryUI: 
\begin_inset CommandInset href
LatexCommand href
target "http://jqueryui.com/"

\end_inset


\end_layout

\end_inset

, which makes it simpler to implement drag-and-drop functionality and styled
 buttons.
\end_layout

\begin_layout Standard
The way the Meemoo framework accepts modules is analogous to JQuery's plugin
 architecture.
 Anybody can extend the framework by making a module.
 Meemoo provides the framework and a communication standard for the modules.
\end_layout

\begin_layout Subsection
Arduino
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement o
overhang 4cm
width "8cm"
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/MAKERS_RIGHTS.pdf
	width 8cm
	BoundingBox 40bp 40bp 590bp 780bp
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The Maker's Bill of Rights 
\begin_inset CommandInset label
LatexCommand label
name "fig:The-Maker's-Bill"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Open Hardware and Maker movements value hackability in electronics and
 other physical objects.
 The Maker's Bill of Rights (Figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:The-Maker's-Bill"

\end_inset

) from Make Magazine lists several commandments for makers and hardware
 manufactures to consider.
 
\begin_inset CommandInset citation
LatexCommand citep
key "jalopy2005"

\end_inset


\end_layout

\begin_layout Standard
The Arduino was designed to make it easier to work with electronics.
 Programming can be done from a Mac or PC via a standard USB cable, where
 earlier microcontrollers would require expensive programming hardware.
 They designed it to be affordable to start: $30 compared to $100 for earlier
 microcontrollers (that were less powerful).
 They released the schematics under a Creative Commons license.
 The creators say that the most important impact of the Arduino is 
\begin_inset Quotes eld
\end_inset

the democratization of engineering.
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
key "Kushner2011"

\end_inset


\end_layout

\begin_layout Standard
A cottage industry has sprung up around Arduino.
 In much the same way that any JavaScript developer can write a plugin for
 JQuery, anybody with knowledge of electronics can make modular 
\begin_inset Quotes eld
\end_inset

plugins
\begin_inset Quotes erd
\end_inset

 for Arduino.
 Two examples are Gameduino
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Gameduino raised 11.5x their goal: 
\begin_inset CommandInset href
LatexCommand href
target "http://kck.st/f44kHG"

\end_inset


\end_layout

\end_inset

 and Pulse Sensor
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Pulse Sensor raised 6.1x their goal: 
\begin_inset CommandInset href
LatexCommand href
target "http://kck.st/nae9lR"

\end_inset


\end_layout

\end_inset

.
 (Both of these projects were funded on Kickstarter and raised many times
 their funding goal, which shows the demand and interest in the Open Hardware
 community.) Gameduino is a 
\begin_inset Quotes eld
\end_inset

shield
\begin_inset Quotes erd
\end_inset

 that plugs into Arduino and contains the needed electronics and software
 libraries to create vintage-style video games.
 Pulse Sensor is a simpler module that contains the electronics needed to
 measure heart rate from a fingertip or ear lobe.
 Plugging both of these modules into an Arduino would take a hacker a long
 way towards creating a pulse-controlled video game.
\end_layout

\begin_layout Standard
Arduino is a framework that simplifies electronic engineering.
 The Arduino community makes modules that can interoperate with other modules
 through that framework.
 In the same way, Meemoo is a framework that simplifies web app development.
 People will be able to experiment with creating apps by plugging modules
 together, and they will also be able to make and share their own modules.
\end_layout

\begin_layout Chapter
Previous work and motivation
\end_layout

\begin_layout Standard
My motivation to make this project comes from years of experimenting with
 digital technologies.
 I have worked in different languages and environments, but the ability
 to share my work online has always brought me back to working with web
 technologies.
 I make my experiments into online creative tools (web apps) in order to
 see how other people use my creations.
\end_layout

\begin_layout Standard
I have experience with two dataflow visual programming environments: Quartz
 Composer and Pure Data.
 The feeling of direct manipulation and immediate feedback in working with
 these environments appealed to me.
 They were able to do graphics and audio processing beyond my coding ability
 at the time, so I was able to explore new kinds of audio/visual experiments.
 They are great tools for interactive installations, when you have control
 over the system.
 However, it is impossible to use them for creating web apps.
\end_layout

\begin_layout Standard
In the past two years browser capabilities have increased and JavaScript
 engines have been made fast enough that audio/visual programming is now
 possible with web standards.
 I realized that I could make my own visual programming environment with
 features that appealed to me from different paradigms: modularity, hackability,
 instant feedback, and shareability.
 Creating a new creative tool is just a matter of wiring some modules together.
 I can write new modules in code that I am already comfortable with.
 Things made with this toolmaker are easily shared online.
 
\end_layout

\begin_layout Standard
I hope that Meemoo might enable somebody to explore creative programming
 in the same way that my capabilities and imagination were extended with
 Quartz Composer.
 
\end_layout

\begin_layout Standard
In a way, Meemoo is an abstraction of all of my earlier digital creative
 experiments.
 I plan on rebuilding some of these experiments in Meemoo to make it easier
 for me (and others) to modify how they work.
\end_layout

\begin_layout Section
Early experiences
\end_layout

\begin_layout Standard
I will start with an abridged history of my relationship with digital media.
 Three anecdotes will illustrate the three most important aspects of this
 thesis project: creative, hackable, web.
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement O
overhang 4cm
width "6cm"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/mac-connect-dots-2.png
	width 6cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Connecting-the-dots"

\end_inset


\begin_inset Quotes eld
\end_inset

Mousing Around
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
My first memory of interacting with a computer was with an Apple Macintosh
 that my father brought home from work in the mid-1980s.
 I have a strong visual memory of using the mouse to connect numbered dots
 to draw a star (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Connecting-the-dots"

\end_inset

).
 Once the star was complete it briefly became animated.
 Seeing this graphic, however simple, react to my input and then come alive
 captured my imagination.
 We only had that computer for a few days, but I was hooked.
 This interaction was part of an introductory program to teach mouse skills,
 called 
\begin_inset Quotes eld
\end_inset

Mousing Around.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Because of timing or school priorities, I was not part of the small generation
 of students that was exposed to BASIC or LOGO programming in school.
 I remained interested in computers, spending any time that I could get
 my hands on them on shareware games and paint programs.
 I did not get into programming until high school, in two very different
 ways: Texas Instruments graphing calculators and web programming.
 
\end_layout

\begin_layout Standard
My higher-level math classes used TI-8x series of graphing calculators.
 These have the ability to write and run programs with a BASIC-like syntax.
 My first program mirrored a game played by many children on standard calculator
s: the 
\begin_inset Quotes eld
\end_inset

+1 game.
\begin_inset Quotes erd
\end_inset

 This game is played by pressing the buttons [1] [+] [1] [=], and then pressing
 [=] as fast as possible.
 This makes the calculator into a counter, and we would have races to see
 who could press [=] fastest.
 Pressing buttons seems to be a common interest for children.
 When a system reacts to the button press, it gives the child a sense of
 control.
 The program that I wrote was just a few lines of code.
 It counted from zero, adding one and displaying the result in an infinite
 loop as fast as the calculator could go.
 I had automated the +1 game, taking out the button-pressing dynamic.
 It was satisfying to see the numbers flying by on the screen.
 I then made a new version of the script that printed the Fibonacci sequence
 in the same manner.
\end_layout

\begin_layout Standard
I then figured out how to script complicated graphic drawings on the small
 monochromatic screen.
 I would watch with interest as the calculator slowly rendered patterns
 from my scripts, one stroke at a time.
 This was my first experience with programming graphics.
 I never managed to make a program draw what I originally had in mind, but
 this was not discouraging.
 The serendipitous images that emerged from my experiments encouraged me
 to explore different directions, and create new challenges for myself.
 I learned a lot about cartesian geometry, algebra, and logic from these
 code explorations.
\end_layout

\begin_layout Standard
The availability of the Internet in my home spurred the second programming
 interest.
 It was empowering to publish my first web site.
 It was a 
\begin_inset Quotes eld
\end_inset

place
\begin_inset Quotes erd
\end_inset

 where I could freely express myself in many different ways.
 Anybody in the world could see it, through the same window and at the same
 size and resolution as the websites of corporations, governments, and universit
ies.
 Learning how to create and post webpages gave me a level of active participatio
n that other media had not offered me.
 
\end_layout

\begin_layout Standard
I learned web programming by example, mostly thanks to the 
\begin_inset Quotes eld
\end_inset

view source
\begin_inset Quotes erd
\end_inset

 command on the browser.
 I would take a little bit of code from a tutorial, some code from another
 page's source, and tinker and experiment with the combination in an editor
 that showed both the code and output in the same window.
 These web programming experiments continued from this time and have culminated
 in this thesis project.
\end_layout

\begin_layout Section
Voice Synthesizer (2002), Flash
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement o
overhang 4cm
width "6cm"
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/2002-voice-synth.png
	width 6cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Voice Synthesizer
\begin_inset CommandInset label
LatexCommand label
name "fig:Voice-Synth"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This project was the ambitious programming that I had done at the time.
 The result was a voice 
\begin_inset Quotes eld
\end_inset

synthesizer
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Voice Synthesizer: 
\begin_inset CommandInset href
LatexCommand href
target "http://forresto.com/oldsite/interactive/mbx/"

\end_inset


\end_layout

\end_inset

 that used looped samples of me saying all of the basic English phonemes.
 As you type on the keyboard, the audio for each phoneme plays and the image
 changes to my mouth making that sound (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Voice-Synth"

\end_inset

).
\end_layout

\begin_layout Standard
In the original concept, I imagined making different voices and faces of
 newscasters and politicians as plug-ins to the system.
 Because of lack of time and programming skill, this never happened.
 It would be easy to make such a system in Meemoo, with the plug-ins as
 modules containing web video and a listing of timecode triggers for each
 phoneme.
\end_layout

\begin_layout Section
Megacam (2010), Flash
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement O
overhang 4cm
width "6cm"
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/2009-megacam.png
	width 6cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Megacam
\begin_inset CommandInset label
LatexCommand label
name "fig:Megacam"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Inspired in part by Lomo cameras, I made a series of webcam toys in Flash
\begin_inset Foot
status open

\begin_layout Plain Layout
Megacam: 
\begin_inset CommandInset href
LatexCommand href
target "http://sembiki.com/megacam/"

\end_inset


\end_layout

\end_inset

.
 In the early prototypes I had sliders for all of the variables.
 I chose four presets for the variables to make the interface simpler (Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Megacam"

\end_inset

), but that also removed the possibility for me and other people to experiment
 with the variables.
 I designed away the hackability.
\end_layout

\begin_layout Standard
If Megacam were remade as a Meemoo app, it would be possible to keep the
 simplicity of the presets, but also the hackability of exposing all variables.
 People could also wire in image effects to change the kinds of photos that
 the app makes.
\end_layout

\begin_layout Section
Opera projection mapping (2011), Quartz Composer
\end_layout

\begin_layout Standard
Last year I was working on a multi-screen video projection system for the
 set design of an Opera.
 I found Quartz Composer modules for midi control, video playback
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Movie Player by v002: 
\begin_inset CommandInset href
LatexCommand href
target "http://v002.info/plugins-sources/v002-movie-player-beta/"

\end_inset


\end_layout

\end_inset

, and projection mapping
\begin_inset Foot
status open

\begin_layout Plain Layout
Projection mapping / quad warping by Mehmet Akten: 
\begin_inset CommandInset href
LatexCommand href
target "http://memo.tv/archive/projection_mapping_quad_warping_with_quartz_composer_vdmx"

\end_inset


\end_layout

\end_inset

.
 I patched them together (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Opera-QC"

\end_inset

) to create a system that controlled video on four projection-mapped screens
 from one projector.
 These modules were all shared online by their authors in the open-source
 spirit.
 I needed to add a feature to the video player module, and was able to do
 so in XCode, Apple's proprietary development environment.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/2011-opera-qc.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Opera-QC"

\end_inset

Connecting open-source modules in Quartz Composer
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Developing this application together required searching the web for the
 modules, modifying and recompiling one of the modules in a development
 environment, and finally wiring the modules together in another environment.
 I was able make this system with much less effort than if I had needed
 to write all of the software myself.
 However, it was several layers of abstraction and complexity to navigate.
\end_layout

\begin_layout Standard
Meemoo will make it possible for people to not only share such modules online,
 but also wire them together, experiment, and save output instantly online.
 This will lower the barrier to entry by decreasing the number of applications
 needed to just one: the web browser.
 It will increase collaboration potential by allowing people to collaborate
 and share modifications all online.
\end_layout

\begin_layout Section
Web Video Remixer (2011), HTML
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/2011-web-video-remixer.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Web Video Remixer
\begin_inset CommandInset label
LatexCommand label
name "fig:Web-Video-Remixer"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
This project is the direct ancestor of Meemoo.
 I wanted to create a remixer for web video, including Youtube.
 The interface was split between controller and player, which were in separate
 HTML pages to allow the player page to be put on a separate monitor or
 projector.
 The controller page sent trigger signals as text to the player page using
 the same mechanism as the current Meemoo uses to send data from module
 to module.
 In early 2011 this mechanism, 
\family typewriter
window.postMessage
\family default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
About 
\family typewriter
window.postMessage
\family default
 from Mozilla: 
\begin_inset CommandInset href
LatexCommand href
target "https://developer.mozilla.org/en/DOM/window.postMessage"

\end_inset


\end_layout

\end_inset

, was only able to send text data to another window.
 Around the middle of the year this limitation was lifted, allowing arbitrary
 data like images and audio to be sent.
 This expansion of the capabilities of browsers was a big inspiration to
 abstract this project from web 
\emph on
video
\emph default
 remixer to web 
\emph on
remixer
\emph default
 remixer.
\end_layout

\begin_layout Standard
There were several types of controllers that could be used to remix the
 video.
 Each video had triggers that corresponded to the keys of the keyboard.
 Patterns could be made by typing these trigger keys.
 Then the patterns could be put in order in the sequencer.
 It is a complex system, and I never got around to actually using it.
 This is a pitfall of tool design that I would like to avoid in the future.
\end_layout

\begin_layout Chapter
Development
\end_layout

\begin_layout Standard
Development on Meemoo's ancestor project began in January 2011.
 In October 2011 Meemoo became a Mozilla WebFWD
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Mozilla WebFWD: 
\begin_inset CommandInset href
LatexCommand href
target "https://webfwd.org/"

\end_inset


\end_layout

\end_inset

 fellow project.
 This program was created to mentor open-source projects that support Mozilla's
 Manifesto.
 One principle outlined in that manifesto that aligns particularly well
 with this project is: 
\begin_inset Quotes eld
\end_inset

Individuals must have the ability to shape their own experiences on the
 Internet
\begin_inset Quotes erd
\end_inset

 (The Mozilla Foundation, 
\begin_inset CommandInset citation
LatexCommand citeyear
key "Mozilla2008"

\end_inset

).
\end_layout

\begin_layout Standard
Meemoo is designed for hackability on all levels.
 On the highest level, people can add and remove modules and reconfigure
 wires in the browser, without coding knowledge.
 On the lowest level, the entire project is free software
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Meemoo source code is hosted on Github: 
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/meemoo"

\end_inset


\end_layout

\end_inset

 under the MIT and AGPL licenses, which guarantee the right to fork the
 project and change how it works at any level.
 
\end_layout

\begin_layout Section
Software design for hackability
\end_layout

\begin_layout Standard
One of the goals for the project is hackability on all levels.
 On the lowest level, this means that the code is open source.
\end_layout

\begin_layout Subsection
Common communication library for modules
\end_layout

\begin_layout Standard
In order to design Meemoo for open modular hackability it must be easy for
 other people to create modules (see 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Plugin-architecture"

\end_inset

).
 Modules are referenced by their Universal Resource Identifier
\end_layout

\begin_layout Standard
Each Meemoo module includes meemoo.js, a JavaScript library which handles
 message routing.
 The inputs and outputs are then specified as in code sample  
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Defining-Inputs-and"

\end_inset

.
 Because every module is including the same library, it becomes a standard
 for message communication.
\end_layout

\begin_layout Subsection
Readable, sharable app source code
\end_layout

\begin_layout Standard
The source code format for a Meemoo app is JSON (JavaScript Object Notation)
 which is fairly easy to read.
 This 
\begin_inset Quotes eld
\end_inset

text blob
\begin_inset Quotes erd
\end_inset

 stores the web address, position, connections, and state of all of the
 modules in the graph (code sample 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Meemoo-App-Source"

\end_inset

).
 Because it is a small amount of text, it is easy to share the app source
 code in email, forums, image descriptions, comments, etc.
\end_layout

\begin_layout Section
User experience design for hackability
\end_layout

\begin_layout Subsection
Direct manipulation
\end_layout

\begin_layout Standard
Ben Shneiderman 
\begin_inset CommandInset citation
LatexCommand citep
key "Shneiderman1986"

\end_inset


\end_layout

\begin_layout Standard
Visual indication of what is happening in each module.
 (Like TouchDesigner).
 Dragging to change variables.
\end_layout

\begin_layout Subsection
Visual programming 
\begin_inset Quotes eld
\end_inset

patching
\begin_inset Quotes erd
\end_inset

 metaphor
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

The use of flexible cords with plugs at their ends and sockets (jacks) to
 make temporary connections dates back to manually operated telephone switchboar
ds.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsection
What is abstracted
\end_layout

\begin_layout Section
Persona and scenario-based design 
\begin_inset CommandInset label
LatexCommand label
name "sec:Persona"

\end_inset


\end_layout

\begin_layout Standard
I used persona profiles and scenario-based design research methodologies
 to think about the potential audience for Meemoo.
 I used these methods as presented by Firefox user experience designer Jennifer
 
\begin_inset CommandInset citation
LatexCommand citeauthor
key "Boriss2011"

\end_inset

 at the Mozilla WebFWD Summit in December of 2011.
 I defined three persona profiles to describe people at different levels
 of engagement with Meemoo: the creator, the hacker, and the modder.
\end_layout

\begin_layout Standard

\emph on
Creators
\emph default
 will use Meemoo apps to make audio-visual media and share them online.
 
\emph on
Hackers
\emph default
 will explore how the apps work, and rewire them to work differently.
 
\emph on
Modders
\emph default
 will use web technologies to modify modules and create new modules which
 will be used in different kinds of apps.
 It is designed in a way that each of these levels leads to the next, encouragin
g people 
\begin_inset Quotes eld
\end_inset

down the rabbit hole
\begin_inset Quotes erd
\end_inset

 towards learning coding.
 I wrote a description of an imaginary person at each level of engagement,
 and how they would interact with the project (see Appendix 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Persona-Profiles"

\end_inset

).
\end_layout

\begin_layout Chapter
Tests and Results
\end_layout

\begin_layout Section
User testing and feedback
\end_layout

\begin_layout Standard
In order to test the user experience of the framework, I did in-person talk-alou
d sessions.
 This methology was presented  I had people interact with Meemoo, sometimes
 freely and sometimes with prompts or goals to accomplish.
 As they interacted with the system, I asked them to speak their thought
 process aloud as much as possible.
 This method of user testing allows the tester to listen in to the thought
 process of the person using the system, making it easy to identify points
 of frustration.
\end_layout

\begin_layout Standard
Some of the points of 
\end_layout

\begin_layout Standard
Aino - Camdoodle
\end_layout

\begin_layout Standard
Ginger - 
\begin_inset Quotes eld
\end_inset

You should add an onionskin
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Teemu - Metronome animation
\end_layout

\begin_layout Standard
Jona - 
\begin_inset Quotes eld
\end_inset

Can I use this in my class?
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Facebook Beta group
\end_layout

\begin_layout Section
Economic model illustrated with Meemoo
\end_layout

\begin_layout Standard
http://meemoo.org/blog/2012-01-24-friction-free-post-scarcity-creative-economies/
\end_layout

\begin_layout Section
Live animation visuals for dance party
\end_layout

\begin_layout Standard
I contacted Ze Frank to ask if he would be a project advisor.
 He gave me some good things to think about:
\end_layout

\begin_layout Quote
\begin_inset Quotes eld
\end_inset

Creating 'possibility spaces' can be exciting for a number of reasons...
 but also can be a false God.
 It can be an excuse to never to actually grapple with whether there is
 value in the output itself, whether beauty is enough, whether people actually
 want what you are making, etc...
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Partially thanks to this provocation, I decided to find a venue to perform
 with Meemoo in a live setting.
 I was invited to do visuals for a Zodiak's Side-Step dance festival club
 night.
 I used the gig as an opportunity to push Meemoo development and pressure-test
 the live-animation features.
 
\end_layout

\begin_layout Standard
For the gig I made some special modules for creating a "world" into which
 I could insert animated sprites.
 On the software development side, I am happy that I decided to make two
 modules (Controller and World) share the same Backbone model.
 Each module has its own view of the same model, so the data passed through
 the wire will be the same on both sides.
\end_layout

\begin_layout Standard
As the party started and I was still coding furiously, adding features to
 the world module.
 Thirty minutes later the music tempo picked up, inviting people to the
 dance floor, and I made myself declare the coding done for the night.
 It was a thrill to see the first sprite hit the dance floor: multicolored
 glitter swirling in water.
\end_layout

\begin_layout Standard
We used clay and construction paper (and some glitter) as the basic building
 blocks of the visuals.
 I am attracted to the textures and imperfections that come from using materials
 like these.
 Using the taptempo module, I synced the sprites' animation to the music's
 beat.
 It was fun to build these tiny animations and then throw them onto the
 screens around the dance floor.
 
\begin_inset Foot
status open

\begin_layout Plain Layout
Video documentation of evening: 
\begin_inset CommandInset href
LatexCommand href
target "http://youtu.be/T_tCyYGLWKM"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/meemoo-at-zodiak.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Meemoo at Zodiak
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are lots of improvements and ideas that came up in the evening:
\end_layout

\begin_layout Itemize
Camera: I used a Sony Eyetoy webcam, which had unsatisfactory color reproduction.
 I chose art supplies with rich colors, but most of the color was washed
 out in the first step.
 Next time I will do some tests to find a better camera.
\end_layout

\begin_layout Itemize
Audience participation: I planned to use Kinect to get silhouettes of people
 dancing into the world, but ran out of time.
 I was imagining using different animated textures for specified depth ranges.
 
\end_layout

\begin_layout Itemize
Flocking: I only had time to implement the tiled animation.
 The original concept was that sprites could be individual or flocks that
 would move around the screens.
 
\end_layout

\begin_layout Itemize
UX tweaks: Confirm dialog on every delete got annoying when juggling around
 modules.
 A method for un/replugging wires that is more direct would make it quicker
 and easier to change the workings of the app.
 
\end_layout

\begin_layout Itemize
I made a hack to open the World module in a new window to view it fullscreen
 on the projectors.
 I plan on making this a built-in feature for any module.
\end_layout

\begin_layout Standard
Despite these limitations, I got a lot of good feedback about the visuals.
 People were interested in what I was doing, and came around to play with
 the art supplies.
 Doing dance party visuals powered by a web browser was a fun experiment,
 and with a few more display options I think that the limitations would
 have been less aesthetically obvious.
 Performing under pressure was a good way to test the system.
\end_layout

\begin_layout Standard
Only 
\emph on
once
\emph default
 in the evening did a JavaScript warning pop up on the dance floor.
 I consider that a victory, and it made me laugh a lot when it happened.
\end_layout

\begin_layout Chapter
Future Development
\end_layout

\begin_layout Standard
This idea is bigger than one developer and one master's thesis.
 I plan on finding resources to continue work, and to bring more people
 with varied talents into the project.
\end_layout

\begin_layout Section
Community for sharing apps
\end_layout

\begin_layout Standard
Meemoo was designed for sharing.
 I would like to take elements of an App Store, Reddit, and Github to create
 a community for sharing and forking Meemoo apps.
 Because of the small amount of source code to describe a Meemoo app (Algorithm
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Meemoo-App-Source"

\end_inset

) it will be relatively easy to make the community scalable.
\end_layout

\begin_layout Section
Touchscreen support 
\begin_inset CommandInset label
LatexCommand label
name "sec:Touchscreen-support"

\end_inset


\end_layout

\begin_layout Standard
Meemoo has the potential to become a powerful tool for creative programming
 on touchscreen devices.
 The library of modules reduces the need to write code in a text editor.
 
\end_layout

\begin_layout Standard
Gestures for zooming and panning are common in touchscreen interaction,
 and could be an intuitive way of navigating a Meemoo application.
 Since Meemoo runs in the browser, zooming and panning already work smoothly.
 Module dragging and wire connecting will take some more development time.
\end_layout

\begin_layout Standard
Meemoo runs in browser, and in general JavaScript is slower than native
 code.
 However, as the power of these devices increases, the kinds of apps that
 can be built with Meemoo will likewise increase.
\end_layout

\begin_layout Section
Code editing
\end_layout

\begin_layout Standard
Websites such as 
\begin_inset CommandInset href
LatexCommand href
name "jsFiddle.net"
target "http://jsfiddle.net/"

\end_inset

 are designed to streamline the experience of editing and sharing HTML experimen
ts and examples.
 The first screen of the site presents three text areas for HTML, CSS, and
 JavaScript, and a result frame that runs the web page output (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:jsFiddle"

\end_inset

).
 This site is used by JavaScript library developers to demonstrate bugs,
 as well as to make demonstrations for web programming questions and answers
 in forums such as StackOverflow.
 The immediacy of editing, saving, running, and sharing code in the browser
 makes this a time-saving tool for these communities.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/jsfiddle.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
jsFiddle 
\begin_inset CommandInset label
LatexCommand label
name "fig:jsFiddle"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
I have been developing the first Meemoo modules using a traditional desktop
 code editor.
 I am used to switching between code editor and browser to test changes,
 and I probably make this mode switch hundreds of times per day.
 A code editor similar to jsFiddle that runs within Meemoo would eliminate
 the need to constantly switch applications to develop and test modules.
 Pressing 
\begin_inset Quotes eld
\end_inset

view source
\begin_inset Quotes erd
\end_inset

 on a module would open an editor showing the source code of the module.
 From this view, there would be options to edit the current module (if you
 have access to it) or fork the module into a new one.
\end_layout

\begin_layout Standard
The open-source programming environment DesignBlocksJS (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:DesignBlocksJS"

\end_inset

) uses Scratch's codeblock programming metaphor.
 Combining these concepts, you could have the higher-level wiring hackability
 of Meemoo, and the lower-level coding hackability of codeblocks to edit
 the source of a Meemoo module.
 Programming modules with codeblocks would be a good transitional step between
 
\begin_inset Quotes eld
\end_inset

hacker
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

modder
\begin_inset Quotes erd
\end_inset

 (See 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Persona"

\end_inset

) for people that want to make their own modules but do not know web programming.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/DesignBlocksJS.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
DesignBlocksJS
\begin_inset CommandInset label
LatexCommand label
name "fig:DesignBlocksJS"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
On touchscreens, coding with drag-and-drop codeblocks has the potential
 to be much easier than text-based coding.
 Some optimization would be required to account for the difference in mouse
 pointer and finger size.
\end_layout

\begin_layout Section
Socket communication
\end_layout

\begin_layout Standard
UX and server for sending arbitrary data from Meemoo on my smartphone to
 my laptop to your tablet (and back).
\end_layout

\begin_layout Section
Meemoo hardware
\end_layout

\begin_layout Standard
Cheap computers (Raspberry Pi) + knobs + sliders + physical patch cables
 for performative interaction.
\end_layout

\begin_layout Section
Twenty Apps to Build With Meemoo
\end_layout

\begin_layout Standard
In the spirit of Seymour Papert and Cynthia Solomon's 1971 memo, 
\begin_inset Quotes eld
\end_inset

Twenty Things to Do With a Computer,
\begin_inset Quotes erd
\end_inset

 I present this list of potential Meemoo apps:
\end_layout

\begin_layout Enumerate
Instructional puzzle game based on rewiring modules
\end_layout

\begin_layout Enumerate
Kaleidoscope with reconfigurable mirrors
\end_layout

\begin_layout Enumerate
Experiment with video feedback with webcam pointed at screen
\end_layout

\begin_layout Enumerate
Collage that accepts images from many sources, like mobile phones
\end_layout

\begin_layout Enumerate
Text-to-song generator
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Speech synthesizer in 1K of JavaScript by Mathieu 'p01' Henri: 
\begin_inset CommandInset href
LatexCommand href
target "http://www.p01.org/releases/JS1K_Speech_Synthesizer/JS1K_Speech_Synthesizer.htm"

\end_inset


\end_layout

\end_inset

 with computer-synthesized voices singing in harmony
\end_layout

\begin_layout Enumerate
Artistic visualization of data from bio-sensors recorded while sleeping
\end_layout

\begin_layout Enumerate
Beatbox control of video mashup, where different sounds in the microphone
 trigger different video clips
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Idea from sCrAmBlEd?HaCkZ! by Sven König: http://youtu.be/eRlhKaxcKpA
\end_layout

\end_inset

 
\end_layout

\begin_layout Enumerate
Hourglass module that flows virtual sand to other modules through the wires
\end_layout

\begin_layout Enumerate
Animated comic builder
\end_layout

\begin_layout Enumerate
Parallax-based 2.5D diorama builder
\end_layout

\begin_layout Enumerate
Arduino module to connect Meemoo apps to physical sensors
\end_layout

\begin_layout Enumerate
Two video players and a crossfader
\end_layout

\begin_layout Enumerate
(Animated) image macro generator
\end_layout

\begin_layout Enumerate
Side-scrolling game with placeholder image sprites that can be replaced
\end_layout

\begin_layout Enumerate
...
\end_layout

\begin_layout Enumerate
TI-83 emulator
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
TI-83 in JavaScript by Cemetech & Kerm Martian: 
\begin_inset CommandInset href
LatexCommand href
target "http://www.cemetech.net/projects/jstified/jstified.php"

\end_inset


\end_layout

\end_inset

 to draw frames of geometric animation
\end_layout

\begin_layout Enumerate
Logo emulator
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Logo in JavaScript by Joshua Bell: 
\begin_inset CommandInset href
LatexCommand href
target "http://www.calormen.com/Logo/"

\end_inset


\end_layout

\end_inset

 that draws patterns with variables influenced by weather data
\end_layout

\begin_layout Enumerate
A Scratch game that draws different scenery based on location data 
\end_layout

\begin_layout Standard
These examples show how -- in the same way that the Internet encompasses
 all past and future media -- a hackable creative coding environment that
 runs in the browser can encompass and interact with all other creative
 coding environments.
 The educational philosophies that developed these systems can be hacked,
 updated, and incorporated into new educational goals.
\end_layout

\begin_layout Chapter
Conclusions
\end_layout

\begin_layout Standard
Call to action.
\end_layout

\end_body
\end_document
